import {
  parse,
  stringify as stringify2
} from "./chunk-LJBPDEX2.js";
import {
  onDestroy
} from "./chunk-MTEOPVPH.js";
import {
  derived,
  get_store_value,
  readable,
  readonly,
  writable
} from "./chunk-ICWSEBJ7.js";
import {
  add_locations,
  append,
  await_block,
  bind_this,
  comment,
  hmr,
  html,
  if_block,
  init,
  legacy_api,
  preventDefault,
  prop,
  set_attribute,
  set_class,
  store_get,
  store_unsub,
  template,
  toggle_class,
  unsubscribe_on_destroy
} from "./chunk-X32BZYXW.js";
import "./chunk-UGQLD3FY.js";
import "./chunk-PMCBTWW3.js";
import "./chunk-5OAVULKH.js";
import {
  append_styles,
  child,
  deep_read_state,
  event,
  first_child,
  get,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mark_module_end,
  mark_module_start,
  mutable_source,
  pop,
  push,
  set,
  set_text,
  sibling,
  slot,
  source,
  stringify,
  template_effect,
  tick
} from "./chunk-Q25YKQMG.js";
import {
  validate_store
} from "./chunk-WHOONRM5.js";
import "./chunk-IP2U24VQ.js";
import "./chunk-YWUGNIHA.js";
import {
  __publicField
} from "./chunk-AXYXVOZD.js";

// node_modules/sveltekit-superforms/dist/client/SuperDebug.svelte
import { browser } from "$app/environment";
import { page } from "$app/stores";
mark_module_start();
SuperDebug.filename = ".../dist/client/SuperDebug.svelte";
var root_2 = add_locations(template(`<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M7 9.667A2.667 2.667 0 0 1 9.667 7h8.666A2.667 2.667 0 0 1 21 9.667v8.666A2.667 2.667 0 0 1 18.333 21H9.667A2.667 2.667 0 0 1 7 18.333z"></path><path d="M4.012 16.737A2.005 2.005 0 0 1 3 15V5c0-1.1.9-2 2-2h10c.75 0 1.158.385 1.5 1"></path></g></svg>`), SuperDebug.filename, [
  [
    446,
    6,
    [
      [447, 8, [[453, 9], [455, 10]]]
    ]
  ]
]);
var root_3 = add_locations(template(`<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path d="M15 12v6m-3-3h6"></path><rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path></g></svg>`), SuperDebug.filename, [
  [
    461,
    6,
    [
      [
        462,
        8,
        [
          [468, 9],
          [468, 37],
          [475, 10]
        ]
      ]
    ]
  ]
]);
var root_4 = add_locations(template(`<div class="svelte-yk8bu4"> </div>`), SuperDebug.filename, [[481, 5]]);
var root_6 = add_locations(template(`<div class="super-debug--promise-loading svelte-yk8bu4">Loading data...</div>`), SuperDebug.filename, [[498, 70]]);
var root_8 = add_locations(template(`<span class="super-debug--promise-rejected svelte-yk8bu4">Rejected:</span> <!>`, 1), SuperDebug.filename, [[501, 23]]);
var root_10 = add_locations(template(`<button type="button" class="super-debug--collapse svelte-yk8bu4"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" class="svelte-yk8bu4"><path fill="currentColor" d="M4.08 11.92L12 4l7.92 7.92l-1.42 1.41l-5.5-5.5V22h-2V7.83l-5.5 5.5l-1.42-1.41M12 4h10V2H2v2h10Z"></path></svg></button>`), SuperDebug.filename, [
  [
    508,
    3,
    [[513, 4, [[519, 6]]]]
  ]
]);
var root_1 = add_locations(template(`<div class="super-debug svelte-yk8bu4" dir="ltr"><div><div class="super-debug--label svelte-yk8bu4"> </div> <div class="super-debug--right-status svelte-yk8bu4"><button type="button" class="super-debug--copy svelte-yk8bu4"><!></button> <!></div></div> <pre class="super-debug--pre svelte-yk8bu4"><code class="super-debug--code"><!></code></pre> <!></div>`), SuperDebug.filename, [
  [
    435,
    1,
    [
      [
        441,
        2,
        [
          [442, 3],
          [443, 3, [[444, 4]]]
        ]
      ],
      [492, 2, [[496, 19]]]
    ]
  ]
]);
function makeError() {
  return new DOMException("The request is not allowed", "NotAllowedError");
}
async function copyClipboardApi(text) {
  if (!navigator.clipboard) {
    throw makeError();
  }
  return navigator.clipboard.writeText(text);
}
async function copyExecCommand(text) {
  const span = document.createElement("span");
  span.textContent = text;
  span.style.whiteSpace = "pre";
  span.style.webkitUserSelect = "auto";
  span.style.userSelect = "all";
  document.body.appendChild(span);
  const selection = window.getSelection();
  const range = window.document.createRange();
  selection == null ? void 0 : selection.removeAllRanges();
  range.selectNode(span);
  selection == null ? void 0 : selection.addRange(range);
  let success = false;
  try {
    success = window.document.execCommand("copy");
  } finally {
    selection == null ? void 0 : selection.removeAllRanges();
    window.document.body.removeChild(span);
  }
  if (!success)
    throw makeError();
}
async function clipboardCopy(text) {
  try {
    await copyClipboardApi(text);
  } catch (err) {
    try {
      await copyExecCommand(text);
    } catch (err2) {
      throw err2 || err || makeError();
    }
  }
}
function SuperDebug($$anchor, $$props) {
  if (new.target === SuperDebug)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false, SuperDebug);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $page = () => (validate_store(page, "page"), store_get(page, "$page", $$subscriptions));
  const $debugData = () => (validate_store(get(debugData), "debugData"), store_get(get(debugData), "$debugData", $$subscriptions));
  const themeStyle = mutable_source();
  const debugData = mutable_source();
  let display = prop($$props, "display", 0, true);
  let status = prop($$props, "status", 0, true);
  let label = prop($$props, "label", 0, "");
  let stringTruncate = prop($$props, "stringTruncate", 0, 120);
  let ref = prop($$props, "ref", 4, void 0);
  let promise = prop($$props, "promise", 0, false);
  let raw = prop($$props, "raw", 0, false);
  let functions = prop($$props, "functions", 0, false);
  let theme = prop($$props, "theme", 0, "default");
  let collapsible = prop($$props, "collapsible", 0, false);
  let collapsed = prop($$props, "collapsed", 4, false);
  if (browser && collapsible())
    setCollapse();
  function setCollapse(status2 = void 0) {
    let data;
    const route = $page().route.id ?? "";
    try {
      if (sessionStorage.SuperDebug) {
        data = JSON.parse(sessionStorage.SuperDebug);
      }
      data = {
        collapsed: data && data.collapsed ? data.collapsed : {}
      };
      data.collapsed[route] = status2 === void 0 ? data.collapsed[route] ?? collapsed() : status2;
    } catch {
      data = { collapsed: { [route]: collapsed() } };
    }
    if (status2 !== void 0) {
      sessionStorage.SuperDebug = JSON.stringify(data);
    }
    collapsed(data.collapsed[route]);
  }
  let copied = mutable_source();
  async function copyContent(e) {
    if (!e.target)
      return;
    const parent = (
      /** @type {HTMLElement} */
      e.target.closest(".super-debug")
    );
    if (!parent)
      return;
    const codeEl = (
      /** @type {HTMLPreElement} */
      parent.querySelector(".super-debug--code")
    );
    if (!codeEl)
      return;
    clearTimeout(get(copied));
    await clipboardCopy(codeEl.innerText);
    set(copied, setTimeout(() => set(copied, void 0), 900));
  }
  function fileToJSON(file) {
    return {
      name: file.name,
      size: file.size,
      type: file.type,
      lastModified: new Date(file.lastModified)
    };
  }
  function syntaxHighlight(json2) {
    switch (typeof json2) {
      case "function": {
        return `<span class="function">[function ${json2.name ?? "unnamed"}]</span>`;
      }
      case "symbol": {
        return `<span class="symbol">${json2.toString()}</span>`;
      }
    }
    const encodedString = JSON.stringify(
      json2,
      function(key, value) {
        if (value === void 0) {
          return "#}#undefined";
        }
        if (typeof this === "object" && this[key] instanceof Date) {
          return "#}D#" + (isNaN(this[key]) ? "Invalid Date" : value);
        }
        if (typeof value === "number") {
          if (value == Number.POSITIVE_INFINITY)
            return "#}#Inf";
          if (value == Number.NEGATIVE_INFINITY)
            return "#}#-Inf";
          if (isNaN(value))
            return "#}#NaN";
        }
        if (typeof value === "bigint") {
          return "#}BI#" + value;
        }
        if (typeof value === "function" && functions()) {
          return `#}F#[function ${value.name}]`;
        }
        if (value instanceof Error) {
          return `#}E#${value.name}: ${value.message || value.cause || "(No error message)"}`;
        }
        if (value instanceof Set) {
          return Array.from(value);
        }
        if (value instanceof Map) {
          return Array.from(value.entries());
        }
        if (browser && typeof this === "object" && this[key] instanceof File) {
          return fileToJSON(this[key]);
        }
        if (browser && typeof this === "object" && this[key] instanceof FileList) {
          const list = this[key];
          const output = [];
          for (let i = 0; i < list.length; i++) {
            const file = list.item(i);
            if (file)
              output.push(fileToJSON(file));
          }
          return output;
        }
        return value;
      },
      2
    ).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    return encodedString.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+-]?\d+)?)/g, function(match) {
      let cls = "number";
      if (/^"/.test(match)) {
        if (/:$/.test(match)) {
          cls = "key";
          match = match.slice(1, -2) + ":";
        } else {
          cls = "string";
          match = stringTruncate() > 0 && match.length > stringTruncate() ? match.slice(0, stringTruncate() / 2) + `[..${match.length - stringTruncate()}/${match.length}..]` + match.slice(-stringTruncate() / 2) : match;
          if (match == '"#}#undefined"') {
            cls = "undefined";
            match = "undefined";
          } else if (match.startsWith('"#}D#')) {
            cls = "date";
            match = match.slice(5, -1);
          } else if (match == '"#}#NaN"') {
            cls = "nan";
            match = "NaN";
          } else if (match == '"#}#Inf"') {
            cls = "nan";
            match = "Infinity";
          } else if (match == '"#}#-Inf"') {
            cls = "nan";
            match = "-Infinity";
          } else if (match.startsWith('"#}BI#')) {
            cls = "bigint";
            match = match.slice(6, -1) + "n";
          } else if (match.startsWith('"#}F#')) {
            cls = "function";
            match = match.slice(5, -1);
          } else if (match.startsWith('"#}E#')) {
            cls = "error";
            match = match.slice(5, -1);
          }
        }
      } else if (/true|false/.test(match)) {
        cls = "boolean";
      } else if (/null/.test(match)) {
        cls = "null";
      }
      return '<span class="' + cls + '">' + match + "</span>";
    });
  }
  function assertPromise(data, raw2, promise2) {
    if (raw2) {
      return false;
    }
    return promise2 || typeof data === "object" && data !== null && "then" in data && typeof data["then"] === "function";
  }
  function assertStore(data, raw2) {
    if (raw2) {
      return false;
    }
    return typeof data === "object" && data !== null && "subscribe" in data && typeof data["subscribe"] === "function";
  }
  legacy_pre_effect(() => deep_read_state(theme()), () => {
    set(themeStyle, theme() === "vscode" ? `
      --sd-vscode-bg-color: #1f1f1f;
      --sd-vscode-label-color: #cccccc;
      --sd-vscode-code-default: #8c8a89;
      --sd-vscode-code-key: #9cdcfe;
      --sd-vscode-code-string: #ce9171;
      --sd-vscode-code-number: #b5c180;
      --sd-vscode-code-boolean: #4a9cd6;
      --sd-vscode-code-null: #4a9cd6;
      --sd-vscode-code-undefined: #4a9cd6;
      --sd-vscode-code-nan: #4a9cd6;
      --sd-vscode-code-symbol: #4de0c5;
      --sd-vscode-sb-thumb-color: #35373a;
      --sd-vscode-sb-thumb-color-focus: #4b4d50;
    ` : void 0);
  });
  legacy_pre_effect(
    () => (deep_read_state($$props.data), deep_read_state(raw())),
    () => {
      store_unsub(set(debugData, assertStore($$props.data, raw()) ? $$props.data : readable($$props.data)), "$debugData", $$subscriptions);
    }
  );
  legacy_pre_effect_reset();
  init();
  var fragment = comment();
  var node = first_child(fragment);
  if_block(node, display, ($$anchor2) => {
    var div = root_1();
    var div_1 = child(div);
    var div_2 = child(div_1);
    var text_1 = child(div_2);
    var div_3 = sibling(sibling(div_2, true));
    var button = child(div_3);
    var node_1 = child(button);
    if_block(
      node_1,
      () => !get(copied),
      ($$anchor3) => {
        var svg = root_2();
        var g = child(svg);
        var path = child(g);
        var path_1 = sibling(path);
        append($$anchor3, svg);
      },
      ($$anchor3) => {
        var svg_1 = root_3();
        var g_1 = child(svg_1);
        var path_2 = child(g_1);
        var rect = sibling(path_2);
        var path_3 = sibling(rect);
        append($$anchor3, svg_1);
      }
    );
    var node_2 = sibling(sibling(button, true));
    if_block(node_2, status, ($$anchor3) => {
      var div_4 = root_4();
      var text_2 = child(div_4);
      template_effect(() => {
        toggle_class(div_4, "info", $page().status < 200);
        toggle_class(div_4, "success", $page().status >= 200 && $page().status < 300);
        toggle_class(div_4, "redirect", $page().status >= 300 && $page().status < 400);
        toggle_class(div_4, "error", $page().status >= 400);
        set_text(text_2, $page().status);
      });
      append($$anchor3, div_4);
    });
    var pre = sibling(sibling(div_1, true));
    bind_this(pre, ($$value) => ref($$value), () => ref());
    var code = child(pre);
    var node_3 = child(code);
    slot(node_3, $$props.children, {}, ($$anchor3) => {
      var fragment_1 = comment();
      var node_4 = first_child(fragment_1);
      if_block(
        node_4,
        () => assertPromise($debugData(), raw(), promise()),
        ($$anchor4) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          await_block(
            node_5,
            $debugData,
            ($$anchor5) => {
              var div_5 = root_6();
              append($$anchor5, div_5);
            },
            ($$anchor5, result) => {
              var fragment_3 = comment();
              var node_6 = first_child(fragment_3);
              html(node_6, () => syntaxHighlight(assertStore(result, raw()) ? get_store_value(result) : result), false, false);
              append($$anchor5, fragment_3);
            },
            ($$anchor5, error) => {
              var fragment_4 = root_8();
              var span_1 = first_child(fragment_4);
              var node_7 = sibling(sibling(span_1, true));
              html(node_7, () => syntaxHighlight(error), false, false);
              append($$anchor5, fragment_4);
            }
          );
          append($$anchor4, fragment_2);
        },
        ($$anchor4) => {
          var fragment_5 = comment();
          var node_8 = first_child(fragment_5);
          html(node_8, () => syntaxHighlight($debugData()), false, false);
          append($$anchor4, fragment_5);
        }
      );
      append($$anchor3, fragment_1);
    });
    var node_9 = sibling(sibling(pre, true));
    if_block(node_9, collapsible, ($$anchor3) => {
      var button_1 = root_10();
      var svg_2 = child(button_1);
      var path_4 = child(svg_2);
      template_effect(() => toggle_class(svg_2, "rotated", collapsed()));
      event("click", button_1, preventDefault(() => setCollapse(!collapsed())), false);
      append($$anchor3, button_1);
    });
    template_effect(() => {
      set_attribute(div, "style", get(themeStyle));
      toggle_class(div, "super-debug--collapsible", collapsible());
      set_class(div_1, `super-debug--status ${stringify(label() === "" ? "absolute inset-x-0 top-0" : "")} svelte-yk8bu4`);
      set_text(text_1, label());
      toggle_class(pre, "super-debug--with-label", label());
      toggle_class(pre, "super-debug--hidden", collapsed());
    });
    event("click", button, copyContent, false);
    append($$anchor2, div);
  });
  append($$anchor, fragment);
  append_styles($$anchor, "svelte-yk8bu4", "\n	.absolute.svelte-yk8bu4 {\n		position: absolute;\n	}\n\n	.top-0.svelte-yk8bu4 {\n		top: 0;\n	}\n\n	.inset-x-0.svelte-yk8bu4 {\n		left: 0px;\n		right: 0px;\n	}\n\n	.super-debug--hidden.svelte-yk8bu4 {\n		height: 0;\n		overflow: hidden;\n	}\n\n	.super-debug--hidden.svelte-yk8bu4:not(.super-debug--with-label) {\n		height: 1.5em;\n	}\n\n	.rotated.svelte-yk8bu4 {\n		transform: rotate(180deg);\n	}\n\n	.super-debug.svelte-yk8bu4 {\n		--_sd-bg-color: var(--sd-bg-color, var(--sd-vscode-bg-color, rgb(30, 41, 59)));\n		position: relative;\n		background-color: var(--_sd-bg-color);\n		border-radius: 0.5rem;\n		overflow: hidden;\n	}\n\n	.super-debug--pre.svelte-yk8bu4 {\n		overflow-x: auto;\n	}\n\n	.super-debug--collapse.svelte-yk8bu4 {\n		display: block;\n		width: 100%;\n		color: rgba(255, 255, 255, 0.25);\n		background-color: rgba(255, 255, 255, 0.15);\n		padding: 5px 0;\n		display: flex;\n		justify-content: center;\n		border-color: transparent;\n		margin: 0;\n		padding: 3px 0;\n	}\n\n	.super-debug--collapse.svelte-yk8bu4:focus {\n		color: #fafafa;\n		background-color: rgba(255, 255, 255, 0.25);\n	}\n\n	.super-debug--collapse.svelte-yk8bu4:is(:where(.svelte-yk8bu4):hover) {\n		color: rgba(255, 255, 255, 0.35);\n		background-color: rgba(255, 255, 255, 0.25);\n	}\n\n	.super-debug--status.svelte-yk8bu4 {\n		display: flex;\n		padding: 1em;\n		padding-bottom: 0;\n		justify-content: space-between;\n		font-family: Inconsolata, Monaco, Consolas, 'Lucida Console', 'Courier New', Courier, monospace;\n	}\n\n	.super-debug--right-status.svelte-yk8bu4 {\n		display: flex;\n		gap: 0.55em;\n	}\n\n	.super-debug--copy.svelte-yk8bu4 {\n		margin: 0;\n		padding: 0;\n		padding-top: 2px;\n		background-color: transparent;\n		border: 0;\n		color: #666;\n		cursor: pointer;\n	}\n\n	.super-debug--copy.svelte-yk8bu4:hover {\n		background-color: transparent;\n		color: #666;\n	}\n\n	.super-debug--copy.svelte-yk8bu4:focus {\n		background-color: transparent;\n		color: #666;\n	}\n\n	.super-debug--label.svelte-yk8bu4 {\n		color: var(--sd-label-color, var(--sd-vscode-label-color, white));\n	}\n\n	.super-debug--promise-loading.svelte-yk8bu4 {\n		color: var(--sd-promise-loading-color, var(--sd-vscode-promise-loading-color, #999));\n	}\n\n	.super-debug--promise-rejected.svelte-yk8bu4 {\n		color: var(--sd-promise-rejected-color, var(--sd-vscode-promise-rejected-color, #ff475d));\n	}\n\n	.super-debug.svelte-yk8bu4 pre:where(.svelte-yk8bu4) {\n		color: var(--sd-code-default, var(--sd-vscode-code-default, #999));\n		background-color: var(--_sd-bg-color);\n		font-size: 1em;\n		margin-bottom: 0;\n		padding: 1em 0 1em 1em;\n	}\n\n	.info.svelte-yk8bu4 {\n		color: var(--sd-info, var(--sd-vscode-info, rgb(85, 85, 255)));\n	}\n\n	.success.svelte-yk8bu4 {\n		color: var(--sd-success, var(--sd-vscode-success, #2cd212));\n	}\n\n	.redirect.svelte-yk8bu4 {\n		color: var(--sd-redirect, var(--sd-vscode-redirect, #03cae5));\n	}\n\n	.error.svelte-yk8bu4 {\n		color: var(--sd-error, var(--sd-vscode-error, #ff475d));\n	}\n\n	.super-debug--code .key {\n		color: var(--sd-code-key, var(--sd-vscode-code-key, #eab308));\n	}\n\n	.super-debug--code .string {\n		color: var(--sd-code-string, var(--sd-vscode-code-string, #6ec687));\n	}\n\n	.super-debug--code .date {\n		color: var(--sd-code-date, var(--sd-vscode-code-date, #f06962));\n	}\n\n	.super-debug--code .boolean {\n		color: var(--sd-code-boolean, var(--sd-vscode-code-boolean, #79b8ff));\n	}\n\n	.super-debug--code .number {\n		color: var(--sd-code-number, var(--sd-vscode-code-number, #af77e9));\n	}\n\n	.super-debug--code .bigint {\n		color: var(--sd-code-bigint, var(--sd-vscode-code-bigint, #af77e9));\n	}\n\n	.super-debug--code .null {\n		color: var(--sd-code-null, var(--sd-vscode-code-null, #238afe));\n	}\n\n	.super-debug--code .nan {\n		color: var(--sd-code-nan, var(--sd-vscode-code-nan, #af77e9));\n	}\n\n	.super-debug--code .undefined {\n		color: var(--sd-code-undefined, var(--sd-vscode-code-undefined, #238afe));\n	}\n\n	.super-debug--code .function {\n		color: var(--sd-code-function, var(--sd-vscode-code-function, #f06962));\n	}\n\n	.super-debug--code .symbol {\n		color: var(--sd-code-symbol, var(--sd-vscode-code-symbol, #4de0c5));\n	}\n\n	.super-debug--code .error {\n		color: var(--sd-code-error, var(--sd-vscode-code-error, #ff475d));\n	}\n\n	.super-debug.svelte-yk8bu4 pre:where(.svelte-yk8bu4)::-webkit-scrollbar {\n		width: var(--sd-sb-width, var(--sd-vscode-sb-width, 1rem));\n		height: var(--sd-sb-height, var(--sd-vscode-sb-height, 1rem));\n	}\n\n	.super-debug.svelte-yk8bu4 pre:where(.svelte-yk8bu4)::-webkit-scrollbar-track {\n		border-radius: 12px;\n		background-color: var(\n			--sd-sb-track-color,\n			var(--sd-vscode-sb-track-color, hsl(0, 0%, 40%, 0.2))\n		);\n	}\n	.super-debug.svelte-yk8bu4:is(:where(.svelte-yk8bu4):focus-within, :where(.svelte-yk8bu4):hover) pre:where(.svelte-yk8bu4)::-webkit-scrollbar-track {\n		border-radius: 12px;\n		background-color: var(\n			--sd-sb-track-color-focus,\n			var(--sd-vscode-sb-track-color-focus, hsl(0, 0%, 50%, 0.2))\n		);\n	}\n\n	.super-debug.svelte-yk8bu4 pre:where(.svelte-yk8bu4)::-webkit-scrollbar-thumb {\n		border-radius: 12px;\n		background-color: var(\n			--sd-sb-thumb-color,\n			var(--sd-vscode-sb-thumb-color, hsl(217, 50%, 50%, 0.5))\n		);\n	}\n	.super-debug.svelte-yk8bu4:is(:where(.svelte-yk8bu4):focus-within, :where(.svelte-yk8bu4):hover) pre:where(.svelte-yk8bu4)::-webkit-scrollbar-thumb {\n		border-radius: 12px;\n		background-color: var(\n			--sd-sb-thumb-color-focus,\n			var(--sd-vscode-sb-thumb-color-focus, hsl(217, 50%, 50%))\n		);\n	}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3VwZXJEZWJ1Zy5zdmVsdGUiLCJtYXBwaW5ncyI6IkFBeWlCTSIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiU3VwZXJEZWJ1Zy5zdmVsdGUiXX0= */");
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  const s = source(SuperDebug);
  const filename = SuperDebug.filename;
  SuperDebug = hmr(s);
  SuperDebug.filename = filename;
  if (import.meta.hot.acceptExports) {
    import.meta.hot.acceptExports(["default"], (module) => {
      set(s, module.default);
    });
  } else {
    import.meta.hot.accept((module) => {
      set(s, module.default);
    });
  }
}
var SuperDebug_default = SuperDebug;
mark_module_end(SuperDebug);

// node_modules/sveltekit-superforms/dist/traversal.js
function setPath(parent, key, value) {
  parent[key] = value;
  return "skip";
}
function isInvalidPath(originalPath, pathData) {
  return pathData.value !== void 0 && typeof pathData.value !== "object" && pathData.path.length < originalPath.length;
}
function pathExists(obj, path, options = {}) {
  if (!options.modifier) {
    options.modifier = (pathData) => isInvalidPath(path, pathData) ? void 0 : pathData.value;
  }
  const exists = traversePath(obj, path, options.modifier);
  if (!exists)
    return void 0;
  if (options.value === void 0)
    return exists;
  return options.value(exists.value) ? exists : void 0;
}
function traversePath(obj, realPath, modifier) {
  if (!realPath.length)
    return void 0;
  const path = [realPath[0]];
  let parent = obj;
  while (parent && path.length < realPath.length) {
    const key2 = path[path.length - 1];
    const value = modifier ? modifier({
      parent,
      key: String(key2),
      value: parent[key2],
      path: path.map((p) => String(p)),
      isLeaf: false,
      set: (v) => setPath(parent, key2, v)
    }) : parent[key2];
    if (value === void 0)
      return void 0;
    else
      parent = value;
    path.push(realPath[path.length]);
  }
  if (!parent)
    return void 0;
  const key = realPath[realPath.length - 1];
  return {
    parent,
    key: String(key),
    value: parent[key],
    path: realPath.map((p) => String(p)),
    isLeaf: true,
    set: (v) => setPath(parent, key, v)
  };
}
function traversePaths(parent, modifier, path = []) {
  for (const key in parent) {
    const value = parent[key];
    const isLeaf = value === null || typeof value !== "object";
    const pathData = {
      parent,
      key,
      value,
      path: path.concat([key]),
      // path.map(String).concat([key])
      isLeaf,
      set: (v) => setPath(parent, key, v)
    };
    const status = modifier(pathData);
    if (status === "abort")
      return status;
    else if (status === "skip")
      continue;
    else if (!isLeaf) {
      const status2 = traversePaths(value, modifier, pathData.path);
      if (status2 === "abort")
        return status2;
    }
  }
}
function eqSet(xs, ys) {
  return xs === ys || xs.size === ys.size && [...xs].every((x) => ys.has(x));
}
function comparePaths(newObj, oldObj) {
  const diffPaths = /* @__PURE__ */ new Map();
  function builtInDiff(one, other) {
    if (one instanceof Date && other instanceof Date && one.getTime() !== other.getTime())
      return true;
    if (one instanceof Set && other instanceof Set && !eqSet(one, other))
      return true;
    if (one instanceof File && other instanceof File && one !== other)
      return true;
    return false;
  }
  function isBuiltin(data) {
    return data instanceof Date || data instanceof Set || data instanceof File;
  }
  function checkPath(data, compareTo) {
    const otherData = compareTo ? traversePath(compareTo, data.path) : void 0;
    function addDiff() {
      diffPaths.set(data.path.join(" "), data.path);
      return "skip";
    }
    if (isBuiltin(data.value)) {
      if (!isBuiltin(otherData == null ? void 0 : otherData.value) || builtInDiff(data.value, otherData.value)) {
        return addDiff();
      }
    }
    if (data.isLeaf) {
      if (!otherData || data.value !== otherData.value) {
        addDiff();
      }
    }
  }
  traversePaths(newObj, (data) => checkPath(data, oldObj));
  traversePaths(oldObj, (data) => checkPath(data, newObj));
  return Array.from(diffPaths.values());
}
function setPaths(obj, paths, value) {
  const isFunction = typeof value === "function";
  for (const path of paths) {
    const leaf = traversePath(obj, path, ({ parent, key, value: value2 }) => {
      if (value2 === void 0 || typeof value2 !== "object") {
        parent[key] = {};
      }
      return parent[key];
    });
    if (leaf)
      leaf.parent[leaf.key] = isFunction ? value(path, leaf) : value;
  }
}

// node_modules/sveltekit-superforms/dist/stringPath.js
function splitPath(path) {
  return path.toString().split(/[[\].]+/).filter((p) => p);
}
function mergePath(path) {
  return path.reduce((acc, next) => {
    const key = String(next);
    if (typeof next === "number" || /^\d+$/.test(key))
      acc += `[${key}]`;
    else if (!acc)
      acc += key;
    else
      acc += `.${key}`;
    return acc;
  }, "");
}

// node_modules/just-clone/index.mjs
var collectionClone = clone;
function clone(obj) {
  let result = obj;
  var type = {}.toString.call(obj).slice(8, -1);
  if (type == "Set") {
    return new Set([...obj].map((value) => clone(value)));
  }
  if (type == "Map") {
    return new Map([...obj].map((kv) => [clone(kv[0]), clone(kv[1])]));
  }
  if (type == "Date") {
    return new Date(obj.getTime());
  }
  if (type == "RegExp") {
    return RegExp(obj.source, getRegExpFlags(obj));
  }
  if (type == "Array" || type == "Object") {
    result = Array.isArray(obj) ? [] : {};
    for (var key in obj) {
      result[key] = clone(obj[key]);
    }
  }
  return result;
}
function getRegExpFlags(regExp) {
  if (typeof regExp.source.flags == "string") {
    return regExp.source.flags;
  } else {
    var flags = [];
    regExp.global && flags.push("g");
    regExp.ignoreCase && flags.push("i");
    regExp.multiline && flags.push("m");
    regExp.sticky && flags.push("y");
    regExp.unicode && flags.push("u");
    return flags.join("");
  }
}

// node_modules/sveltekit-superforms/dist/utils.js
function clone2(data) {
  return data && typeof data === "object" ? collectionClone(data) : data;
}
function assertSchema(schema, path) {
  if (typeof schema === "boolean") {
    throw new SchemaError("Schema property cannot be defined as boolean.", path);
  }
}

// node_modules/ts-deepmerge/esm/index.js
var isObject = (obj) => {
  if (typeof obj === "object" && obj !== null) {
    if (typeof Object.getPrototypeOf === "function") {
      const prototype = Object.getPrototypeOf(obj);
      return prototype === Object.prototype || prototype === null;
    }
    return Object.prototype.toString.call(obj) === "[object Object]";
  }
  return false;
};
var merge = (...objects) => objects.reduce((result, current) => {
  if (Array.isArray(current)) {
    throw new TypeError("Arguments provided to ts-deepmerge must be objects, not arrays.");
  }
  Object.keys(current).forEach((key) => {
    if (["__proto__", "constructor", "prototype"].includes(key)) {
      return;
    }
    if (Array.isArray(result[key]) && Array.isArray(current[key])) {
      result[key] = merge.options.mergeArrays ? merge.options.uniqueArrayItems ? Array.from(new Set(result[key].concat(current[key]))) : [...result[key], ...current[key]] : current[key];
    } else if (isObject(result[key]) && isObject(current[key])) {
      result[key] = merge(result[key], current[key]);
    } else {
      result[key] = current[key] === void 0 ? merge.options.allowUndefinedOverrides ? current[key] : result[key] : current[key];
    }
  });
  return result;
}, {});
var defaultOptions = {
  allowUndefinedOverrides: true,
  mergeArrays: true,
  uniqueArrayItems: true
};
merge.options = defaultOptions;
merge.withOptions = (options, ...objects) => {
  merge.options = Object.assign(Object.assign({}, defaultOptions), options);
  const result = merge(...objects);
  merge.options = defaultOptions;
  return result;
};

// node_modules/sveltekit-superforms/dist/jsonSchema/schemaInfo.js
var conversionFormatTypes = ["unix-time", "bigint", "any", "symbol", "set"];
function schemaInfo(schema, isOptional, path) {
  var _a;
  assertSchema(schema, path);
  if (schema.allOf && schema.allOf.length) {
    return {
      ...merge.withOptions({ allowUndefinedOverrides: false }, ...schema.allOf.map((s) => schemaInfo(s, false, []))),
      schema
    };
  }
  const types = schemaTypes(schema, path);
  const array = schema.items && types.includes("array") ? (Array.isArray(schema.items) ? schema.items : [schema.items]).filter((s) => typeof s !== "boolean") : void 0;
  const properties = schema.properties && types.includes("object") ? Object.fromEntries(Object.entries(schema.properties).filter(([, value]) => typeof value !== "boolean")) : void 0;
  const union = (_a = unionInfo(schema)) == null ? void 0 : _a.filter((u) => u.type !== "null" && u.const !== null);
  return {
    types: types.filter((s) => s !== "null"),
    isOptional,
    isNullable: types.includes("null"),
    schema,
    union: (union == null ? void 0 : union.length) ? union : void 0,
    array,
    properties,
    required: schema.required
  };
}
function schemaTypes(schema, path) {
  assertSchema(schema, path);
  let types = schema.const === null ? ["null"] : [];
  if (schema.type) {
    types = Array.isArray(schema.type) ? schema.type : [schema.type];
  }
  if (schema.anyOf) {
    types = schema.anyOf.flatMap((s) => schemaTypes(s, path));
  }
  if (types.includes("array") && schema.uniqueItems) {
    const i = types.findIndex((t) => t != "array");
    types[i] = "set";
  } else if (schema.format && conversionFormatTypes.includes(schema.format)) {
    types.unshift(schema.format);
    if (schema.format == "unix-time") {
      const i = types.findIndex((t) => t == "integer");
      types.splice(i, 1);
    }
  }
  if (schema.const && schema.const !== null && typeof schema.const !== "function") {
    types.push(typeof schema.const);
  }
  return Array.from(new Set(types));
}
function unionInfo(schema) {
  if (!schema.anyOf || !schema.anyOf.length)
    return void 0;
  return schema.anyOf.filter((s) => typeof s !== "boolean");
}

// node_modules/sveltekit-superforms/dist/jsonSchema/schemaDefaults.js
function defaultValues(schema, isOptional = false, path = []) {
  return _defaultValues(schema, isOptional, path);
}
function _defaultValues(schema, isOptional, path) {
  var _a;
  if (!schema) {
    throw new SchemaError("Schema was undefined", path);
  }
  const info = schemaInfo(schema, isOptional, path);
  if (!info)
    return void 0;
  let objectDefaults = void 0;
  if ("default" in schema) {
    if (info.types.includes("object") && schema.default && typeof schema.default == "object" && !Array.isArray(schema.default)) {
      objectDefaults = schema.default;
    } else {
      if (info.types.length > 1) {
        if (info.types.includes("unix-time") && (info.types.includes("integer") || info.types.includes("number")))
          throw new SchemaError("Cannot resolve a default value with a union that includes a date and a number/integer.", path);
      }
      const [type] = info.types;
      return formatDefaultValue(type, schema.default);
    }
  }
  let _multiType;
  const isMultiTypeUnion = () => {
    if (!info.union || info.union.length < 2)
      return false;
    if (info.union.some((i) => i.enum))
      return true;
    if (!_multiType) {
      _multiType = new Set(info.types.map((i) => {
        return ["integer", "unix-time"].includes(i) ? "number" : i;
      }));
    }
    return _multiType.size > 1;
  };
  let output = {};
  if (!objectDefaults && info.union) {
    const singleDefault = info.union.filter((s) => typeof s !== "boolean" && s.default !== void 0);
    if (singleDefault.length == 1) {
      return _defaultValues(singleDefault[0], isOptional, path);
    } else if (singleDefault.length > 1) {
      throw new SchemaError("Only one default value can exist in a union, or set a default value for the whole union.", path);
    } else {
      if (info.isNullable)
        return null;
      if (info.isOptional)
        return void 0;
      if (isMultiTypeUnion()) {
        throw new SchemaError("Multi-type unions must have a default value, or exactly one of the union types must have.", path);
      }
      if (info.union.length && info.types[0] == "object") {
        output = info.union.length > 1 ? merge.withOptions({ allowUndefinedOverrides: true }, ...info.union.map((s) => _defaultValues(s, isOptional, path))) : _defaultValues(info.union[0], isOptional, path);
      }
    }
  }
  if (!objectDefaults) {
    if (info.isNullable)
      return null;
    if (info.isOptional)
      return void 0;
  }
  if (info.properties) {
    for (const [key, value] of Object.entries(info.properties)) {
      assertSchema(value, [...path, key]);
      const def = objectDefaults && objectDefaults[key] !== void 0 ? objectDefaults[key] : _defaultValues(value, !((_a = info.required) == null ? void 0 : _a.includes(key)), [...path, key]);
      output[key] = def;
    }
    return output;
  } else if (objectDefaults) {
    return objectDefaults;
  }
  if (schema.enum) {
    return schema.enum[0];
  }
  if (isMultiTypeUnion()) {
    throw new SchemaError("Default values cannot have more than one type.", path);
  } else if (info.types.length == 0) {
    return void 0;
  }
  const [formatType] = info.types;
  return defaultValue(formatType, schema.enum);
}
function formatDefaultValue(type, value) {
  switch (type) {
    case "set":
      return Array.isArray(value) ? new Set(value) : value;
    case "Date":
    case "date":
    case "unix-time":
      if (typeof value === "string" || typeof value === "number")
        return new Date(value);
      break;
    case "bigint":
      if (typeof value === "string" || typeof value === "number")
        return BigInt(value);
      break;
    case "symbol":
      if (typeof value === "string" || typeof value === "number")
        return Symbol(value);
      break;
  }
  return value;
}
function defaultValue(type, enumType) {
  switch (type) {
    case "string":
      return enumType && enumType.length > 0 ? enumType[0] : "";
    case "number":
    case "integer":
      return enumType && enumType.length > 0 ? enumType[0] : 0;
    case "boolean":
      return false;
    case "array":
      return [];
    case "object":
      return {};
    case "null":
      return null;
    case "Date":
    case "date":
    case "unix-time":
      return void 0;
    case "bigint":
      return BigInt(0);
    case "set":
      return /* @__PURE__ */ new Set();
    case "symbol":
      return Symbol();
    case "undefined":
    case "any":
      return void 0;
    default:
      throw new SchemaError("Schema type or format not supported, requires explicit default value: " + type);
  }
}
function defaultTypes(schema, path = []) {
  return _defaultTypes(schema, false, path);
}
function _defaultTypes(schema, isOptional, path) {
  var _a;
  if (!schema) {
    throw new SchemaError("Schema was undefined", path);
  }
  const info = schemaInfo(schema, isOptional, path);
  const output = {
    __types: info.types
  };
  if (info.schema.items && typeof info.schema.items == "object" && !Array.isArray(info.schema.items)) {
    output.__items = _defaultTypes(info.schema.items, info.isOptional, path);
  }
  if (info.properties) {
    for (const [key, value] of Object.entries(info.properties)) {
      assertSchema(value, [...path, key]);
      output[key] = _defaultTypes(info.properties[key], !((_a = info.required) == null ? void 0 : _a.includes(key)), [
        ...path,
        key
      ]);
    }
  }
  if (info.isNullable && !output.__types.includes("null")) {
    output.__types.push("null");
  }
  if (info.isOptional && !output.__types.includes("undefined")) {
    output.__types.push("undefined");
  }
  return output;
}

// node_modules/sveltekit-superforms/dist/errors.js
var SuperFormError = class _SuperFormError extends Error {
  constructor(message2) {
    super(message2);
    Object.setPrototypeOf(this, _SuperFormError.prototype);
  }
};
var SchemaError = class _SchemaError extends SuperFormError {
  constructor(message2, path) {
    super((path && path.length ? `[${Array.isArray(path) ? path.join(".") : path}] ` : "") + message2);
    __publicField(this, "path");
    this.path = Array.isArray(path) ? path.join(".") : path;
    Object.setPrototypeOf(this, _SchemaError.prototype);
  }
};
function mapErrors(errors, shape) {
  var _a;
  const output = {};
  function addFormLevelError(error) {
    if (!("_errors" in output))
      output._errors = [];
    if (!Array.isArray(output._errors)) {
      if (typeof output._errors === "string")
        output._errors = [output._errors];
      else
        throw new SuperFormError("Form-level error was not an array.");
    }
    output._errors.push(error.message);
  }
  for (const error of errors) {
    if (!error.path || error.path.length == 1 && !error.path[0]) {
      addFormLevelError(error);
      continue;
    }
    const isLastIndexNumeric = /^\d$/.test(String(error.path[error.path.length - 1]));
    const objectError = !isLastIndexNumeric && ((_a = pathExists(shape, error.path.filter((p) => /\D/.test(String(p))))) == null ? void 0 : _a.value);
    const leaf = traversePath(output, error.path, ({ value, parent: parent2, key: key2 }) => {
      if (value === void 0)
        parent2[key2] = {};
      return parent2[key2];
    });
    if (!leaf) {
      addFormLevelError(error);
      continue;
    }
    const { parent, key } = leaf;
    if (objectError) {
      if (!(key in parent))
        parent[key] = {};
      if (!("_errors" in parent[key]))
        parent[key]._errors = [error.message];
      else
        parent[key]._errors.push(error.message);
    } else {
      if (!(key in parent))
        parent[key] = [error.message];
      else
        parent[key].push(error.message);
    }
  }
  return output;
}
function updateErrors(New, Previous, force) {
  if (force)
    return New;
  traversePaths(Previous, (errors) => {
    if (!Array.isArray(errors.value))
      return;
    errors.set(void 0);
  });
  traversePaths(New, (error) => {
    if (!Array.isArray(error.value) && error.value !== void 0)
      return;
    setPaths(Previous, [error.path], error.value);
  });
  return Previous;
}
function flattenErrors(errors) {
  return _flattenErrors(errors, []);
}
function _flattenErrors(errors, path) {
  const entries = Object.entries(errors);
  return entries.filter(([, value]) => value !== void 0).flatMap(([key, messages]) => {
    if (Array.isArray(messages) && messages.length > 0) {
      const currPath = path.concat([key]);
      return { path: mergePath(currPath), messages };
    } else {
      return _flattenErrors(errors[key], path.concat([key]));
    }
  });
}
function mergeDefaults(parsedData, defaults2) {
  if (!parsedData)
    return clone2(defaults2);
  return merge.withOptions({ mergeArrays: false }, defaults2, parsedData);
}
function replaceInvalidDefaults(Data, Defaults, _schema, Errors, preprocessed) {
  const defaultType = _schema.additionalProperties && typeof _schema.additionalProperties == "object" ? { __types: schemaInfo(_schema.additionalProperties, false, []).types } : void 0;
  const Types = defaultTypes(_schema);
  function Types_correctValue(dataValue, defValue, type) {
    const types = type.__types;
    if (!types.length || types.every((t) => t == "undefined" || t == "null" || t == "any")) {
      return dataValue;
    } else if (types.length == 1 && types[0] == "array" && !type.__items) {
      return dataValue;
    }
    const dateTypes = ["unix-time", "Date", "date"];
    for (const schemaType of types) {
      const defaultTypeValue = defaultValue(schemaType, void 0);
      const sameType = typeof dataValue === typeof defaultTypeValue || dateTypes.includes(schemaType) && dataValue instanceof Date;
      const sameExistance = sameType && dataValue === null === (defaultTypeValue === null);
      if (sameType && sameExistance) {
        return dataValue;
      } else if (type.__items) {
        return Types_correctValue(dataValue, defValue, type.__items);
      }
    }
    if (defValue === void 0 && types.includes("null")) {
      return null;
    }
    return defValue;
  }
  function Data_traverse() {
    traversePaths(Defaults, Defaults_traverseAndReplace);
    Errors_traverseAndReplace();
    return Data;
  }
  function Data_setValue(currentPath, newValue) {
    setPaths(Data, [currentPath], newValue);
  }
  function Errors_traverseAndReplace() {
    var _a;
    for (const error of Errors) {
      if (!error.path)
        continue;
      Defaults_traverseAndReplace({
        path: error.path,
        value: (_a = pathExists(Defaults, error.path)) == null ? void 0 : _a.value
      });
    }
  }
  function Defaults_traverseAndReplace(defaultPath) {
    const currentPath = defaultPath.path;
    if (!currentPath || !currentPath[0])
      return;
    if (typeof currentPath[0] === "string" && (preprocessed == null ? void 0 : preprocessed.includes(currentPath[0])))
      return;
    const dataPath = pathExists(Data, currentPath);
    if (!dataPath && defaultPath.value !== void 0 || dataPath && dataPath.value === void 0) {
      Data_setValue(currentPath, defaultPath.value);
    } else if (dataPath) {
      const defValue = defaultPath.value;
      const dataValue = dataPath.value;
      if (defValue !== void 0 && typeof dataValue === typeof defValue && dataValue === null === (defValue === null)) {
        return;
      }
      const typePath = currentPath.filter((p) => /\D/.test(String(p)));
      const pathTypes = traversePath(Types, typePath, (path) => {
        return "__items" in path.value ? path.value.__items : path.value;
      });
      if (!pathTypes) {
        throw new SchemaError("No types found for defaults", currentPath);
      }
      const fieldType = pathTypes.value ?? defaultType;
      if (!fieldType) {
        throw new SchemaError("No default value specified for field (can be undefined, but must be explicit)", currentPath);
      }
      Data_setValue(currentPath, Types_correctValue(dataValue, defValue, fieldType));
    }
  }
  {
    return Data_traverse();
  }
}

// node_modules/sveltekit-superforms/dist/client/superForm.js
import { navigating, page as page2 } from "$app/stores";
import { browser as browser4 } from "$app/environment";
import { beforeNavigate, goto, invalidateAll } from "$app/navigation";

// node_modules/sveltekit-superforms/dist/client/flash.js
import { browser as browser2 } from "$app/environment";
function cancelFlash(options) {
  if (!options.flashMessage || !browser2)
    return;
  if (!shouldSyncFlash(options))
    return;
  document.cookie = `flash=; Max-Age=0; Path=${options.flashMessage.cookiePath ?? "/"};`;
}
function shouldSyncFlash(options) {
  if (!options.flashMessage || !browser2)
    return false;
  return options.syncFlashMessage;
}

// node_modules/sveltekit-superforms/dist/client/superForm.js
import { applyAction, enhance as kitEnhance } from "$app/forms";

// node_modules/sveltekit-superforms/dist/client/customValidity.js
var noCustomValidityDataAttribute = "noCustomValidity";
async function updateCustomValidity(validityEl, errors) {
  if ("setCustomValidity" in validityEl) {
    validityEl.setCustomValidity("");
  }
  if (noCustomValidityDataAttribute in validityEl.dataset)
    return;
  setCustomValidity(validityEl, errors);
}
function setCustomValidityForm(formElement, errors) {
  for (const el of formElement.querySelectorAll("input,select,textarea,button")) {
    if (noCustomValidityDataAttribute in el.dataset) {
      continue;
    }
    const error = traversePath(errors, splitPath(el.name));
    setCustomValidity(el, error == null ? void 0 : error.value);
    if (error == null ? void 0 : error.value)
      return;
  }
}
function setCustomValidity(el, errors) {
  const message2 = errors && errors.length ? errors.join("\n") : "";
  el.setCustomValidity(message2);
  if (message2)
    el.reportValidity();
}

// node_modules/sveltekit-superforms/dist/client/elements.js
var isElementInViewport = (el, topOffset = 0) => {
  const rect = el.getBoundingClientRect();
  return rect.top >= topOffset && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
};
var scrollToAndCenter = (el, offset = 1.125, behavior = "smooth") => {
  const elementRect = el.getBoundingClientRect();
  const absoluteElementTop = elementRect.top + window.pageYOffset;
  const top = absoluteElementTop - window.innerHeight / (2 * offset);
  window.scrollTo({ left: 0, top, behavior });
};
var immediateInputTypes = ["checkbox", "radio", "range", "file"];
function inputInfo(el) {
  const immediate = !!el && (el instanceof HTMLSelectElement || el instanceof HTMLInputElement && immediateInputTypes.includes(el.type));
  const multiple = !!el && el instanceof HTMLSelectElement && el.multiple;
  const file = !!el && el instanceof HTMLInputElement && el.type == "file";
  return { immediate, multiple, file };
}

// node_modules/sveltekit-superforms/dist/client/form.js
var FetchStatus;
(function(FetchStatus2) {
  FetchStatus2[FetchStatus2["Idle"] = 0] = "Idle";
  FetchStatus2[FetchStatus2["Submitting"] = 1] = "Submitting";
  FetchStatus2[FetchStatus2["Delayed"] = 2] = "Delayed";
  FetchStatus2[FetchStatus2["Timeout"] = 3] = "Timeout";
})(FetchStatus || (FetchStatus = {}));
var activeTimers = /* @__PURE__ */ new Set();
function Form(formElement, timers, options) {
  let state = FetchStatus.Idle;
  let delayedTimeout, timeoutTimeout;
  const Timers = activeTimers;
  function Timers_start() {
    Timers_clear();
    Timers_setState(state != FetchStatus.Delayed ? FetchStatus.Submitting : FetchStatus.Delayed);
    delayedTimeout = window.setTimeout(() => {
      if (delayedTimeout && state == FetchStatus.Submitting)
        Timers_setState(FetchStatus.Delayed);
    }, options.delayMs);
    timeoutTimeout = window.setTimeout(() => {
      if (timeoutTimeout && state == FetchStatus.Delayed)
        Timers_setState(FetchStatus.Timeout);
    }, options.timeoutMs);
    Timers.add(Timers_clear);
  }
  function Timers_clear() {
    clearTimeout(delayedTimeout);
    clearTimeout(timeoutTimeout);
    delayedTimeout = timeoutTimeout = 0;
    Timers.delete(Timers_clear);
    Timers_setState(FetchStatus.Idle);
  }
  function Timers_clearAll() {
    Timers.forEach((t) => t());
    Timers.clear();
  }
  function Timers_setState(s) {
    state = s;
    timers.submitting.set(state >= FetchStatus.Submitting);
    timers.delayed.set(state >= FetchStatus.Delayed);
    timers.timeout.set(state >= FetchStatus.Timeout);
  }
  const ErrorTextEvents = formElement;
  function ErrorTextEvents__selectText(e) {
    const target = e.target;
    if (options.selectErrorText)
      target.select();
  }
  function ErrorTextEvents_addErrorTextListeners() {
    if (!options.selectErrorText)
      return;
    ErrorTextEvents.querySelectorAll("input").forEach((el) => {
      el.addEventListener("invalid", ErrorTextEvents__selectText);
    });
  }
  function ErrorTextEvents_removeErrorTextListeners() {
    if (!options.selectErrorText)
      return;
    ErrorTextEvents.querySelectorAll("input").forEach((el) => el.removeEventListener("invalid", ErrorTextEvents__selectText));
  }
  const Form2 = formElement;
  {
    ErrorTextEvents_addErrorTextListeners();
    const completed = (opts) => {
      if (!opts.clearAll)
        Timers_clear();
      else
        Timers_clearAll();
      if (!opts.cancelled)
        setTimeout(() => scrollToFirstError(Form2, options), 1);
    };
    onDestroy(() => {
      ErrorTextEvents_removeErrorTextListeners();
      completed({ cancelled: true });
    });
    return {
      submitting() {
        Timers_start();
      },
      completed,
      scrollToFirstError() {
        setTimeout(() => scrollToFirstError(Form2, options), 1);
      },
      isSubmitting: () => state === FetchStatus.Submitting || state === FetchStatus.Delayed
    };
  }
}
var scrollToFirstError = async (Form2, options) => {
  if (options.scrollToError == "off")
    return;
  const selector = options.errorSelector;
  if (!selector)
    return;
  await tick();
  let el;
  el = Form2.querySelector(selector);
  if (!el)
    return;
  el = el.querySelector(selector) ?? el;
  const nav = options.stickyNavbar ? document.querySelector(options.stickyNavbar) : null;
  if (typeof options.scrollToError != "string") {
    el.scrollIntoView(options.scrollToError);
  } else if (!isElementInViewport(el, (nav == null ? void 0 : nav.offsetHeight) ?? 0)) {
    scrollToAndCenter(el, void 0, options.scrollToError);
  }
  function Form_shouldAutoFocus(userAgent) {
    if (typeof options.autoFocusOnError === "boolean")
      return options.autoFocusOnError;
    else
      return !/iPhone|iPad|iPod|Android/i.test(userAgent);
  }
  if (!Form_shouldAutoFocus(navigator.userAgent))
    return;
  let focusEl;
  focusEl = el;
  if (!["INPUT", "SELECT", "BUTTON", "TEXTAREA"].includes(focusEl.tagName)) {
    focusEl = focusEl.querySelector('input:not([type="hidden"]):not(.flatpickr-input), select, textarea');
  }
  if (focusEl) {
    try {
      focusEl.focus({ preventScroll: true });
      if (options.selectErrorText && focusEl.tagName == "INPUT") {
        focusEl.select();
      }
    } catch (err) {
    }
  }
};

// node_modules/sveltekit-superforms/dist/client/proxies.js
import { browser as browser3 } from "$app/environment";
var defaultOptions2 = {
  trueStringValue: "true",
  dateFormat: "iso"
};
function booleanProxy(form, path, options) {
  return _stringProxy(form, path, "boolean", {
    ...defaultOptions2,
    ...options
  });
}
function intProxy(form, path, options) {
  return _stringProxy(form, path, "int", {
    ...defaultOptions2,
    ...options
  });
}
function numberProxy(form, path, options) {
  return _stringProxy(form, path, "number", {
    ...defaultOptions2,
    ...options
  });
}
function dateProxy(form, path, options) {
  return _stringProxy(form, path, "date", {
    ...defaultOptions2,
    dateFormat: (options == null ? void 0 : options.format) ?? "iso",
    empty: options == null ? void 0 : options.empty
  });
}
function stringProxy(form, path, options) {
  return _stringProxy(form, path, "string", {
    ...defaultOptions2,
    ...options
  });
}
function fileFieldProxy(form, path, options) {
  const fileField = fileProxy(form, path, options);
  const formField = formFieldProxy(form, path, options);
  return { ...formField, value: fileField };
}
function fileProxy(form, path, options) {
  const formFile = fieldProxy(form, path, options);
  const fileProxy2 = writable(browser3 ? new DataTransfer().files : {});
  let initialized = false;
  let initialValue;
  formFile.subscribe((file) => {
    if (!browser3)
      return;
    if (!initialized) {
      initialValue = (options == null ? void 0 : options.empty) ? options.empty === "undefined" ? void 0 : null : file;
      initialized = true;
    }
    const dt = new DataTransfer();
    if (file instanceof File)
      dt.items.add(file);
    fileProxy2.set(dt.files);
  });
  const fileStore = {
    subscribe(run) {
      return fileProxy2.subscribe(run);
    },
    set(file) {
      if (!browser3)
        return;
      if (!file) {
        const dt = new DataTransfer();
        fileProxy2.set(dt.files);
        formFile.set(file);
      } else if (file instanceof File) {
        const dt = new DataTransfer();
        dt.items.add(file);
        fileProxy2.set(dt.files);
        formFile.set(file);
      } else if (file instanceof FileList) {
        fileProxy2.set(file);
        if (file.length > 0)
          formFile.set(file.item(0));
        else
          formFile.set(initialValue);
      }
    },
    update() {
      throw new SuperFormError("You cannot update a fileProxy, only set it.");
    }
  };
  return fileStore;
}
function filesFieldProxy(form, path, options) {
  const filesStore = filesProxy(form, path, options);
  const arrayField = arrayProxy(form, path, options);
  return { ...arrayField, values: filesStore };
}
function filesProxy(form, path, options) {
  const formFiles = fieldProxy(form, path, options);
  const filesProxy2 = writable(browser3 ? new DataTransfer().files : {});
  formFiles.subscribe((files) => {
    if (!browser3)
      return;
    const dt = new DataTransfer();
    if (Array.isArray(files)) {
      if (files.length && files.every((f) => !f)) {
        formFiles.set([]);
        return;
      }
      files.filter((f) => f instanceof File).forEach((file) => dt.items.add(file));
    }
    filesProxy2.set(dt.files);
  });
  const filesStore = {
    subscribe(run) {
      return filesProxy2.subscribe(run);
    },
    set(files) {
      if (!browser3)
        return;
      if (!(files instanceof FileList)) {
        const dt = new DataTransfer();
        if (Array.isArray(files))
          files.forEach((file) => {
            if (file instanceof File)
              dt.items.add(file);
          });
        filesProxy2.set(dt.files);
        formFiles.set(files);
      } else {
        const output = [];
        for (let i = 0; i < files.length; i++) {
          const file = files.item(i);
          if (file)
            output.push(file);
        }
        filesProxy2.set(files);
        formFiles.set(output);
      }
    },
    update(updater) {
      filesStore.set(updater(get_store_value(formFiles)));
    }
  };
  return filesStore;
}
function _stringProxy(form, path, type, options) {
  function toValue(value) {
    if (!value && options.empty !== void 0) {
      return options.empty === "null" ? null : options.empty === "zero" ? 0 : void 0;
    }
    if (typeof value === "number") {
      value = value.toString();
    }
    if (typeof value !== "string") {
      value = "";
    }
    const stringValue = value;
    if (type == "string")
      return stringValue;
    else if (type == "boolean")
      return !!stringValue;
    else if (type == "date")
      return new Date(stringValue);
    const numberToConvert = options.delimiter ? stringValue.replace(options.delimiter, ".") : stringValue;
    let num;
    if (numberToConvert === "" && options.empty == "zero")
      num = 0;
    else if (type == "number")
      num = parseFloat(numberToConvert);
    else
      num = parseInt(numberToConvert, 10);
    return num;
  }
  const isSuper = isSuperForm(form, options);
  const realProxy = isSuper ? superFieldProxy(form, path, { taint: options.taint }) : fieldProxy(form, path);
  let updatedValue = null;
  let initialized = false;
  const proxy = derived(realProxy, (value) => {
    if (!initialized) {
      initialized = true;
      if (options.initiallyEmptyIfZero && !value)
        return "";
    }
    if (updatedValue !== null) {
      const current = updatedValue;
      updatedValue = null;
      return current;
    }
    if (value === void 0 || value === null)
      return "";
    if (type == "string") {
      return value;
    } else if (type == "int" || type == "number") {
      if (value === "") {
        realProxy.set(0, isSuper ? { taint: false } : void 0);
      }
      if (typeof value === "number" && isNaN(value))
        return "";
      return String(value);
    } else if (type == "date") {
      const date = value;
      if (isNaN(date))
        return "";
      switch (options.dateFormat) {
        case "iso":
          return date.toISOString();
        case "date":
          return date.toISOString().slice(0, 10);
        case "datetime":
          return date.toISOString().slice(0, 16);
        case "time":
          return date.toISOString().slice(11, 16);
        case "date-utc":
          return UTCDate(date);
        case "datetime-utc":
          return UTCDate(date) + "T" + UTCTime(date);
        case "time-utc":
          return UTCTime(date);
        case "date-local":
          return localDate(date);
        case "datetime-local":
          return localDate(date) + "T" + localTime(date);
        case "time-local":
          return localTime(date);
      }
    } else {
      return value ? options.trueStringValue : "";
    }
  });
  return {
    subscribe: proxy.subscribe,
    set(val) {
      updatedValue = val;
      const newValue = toValue(updatedValue);
      realProxy.set(newValue);
    },
    update(updater) {
      realProxy.update((f) => {
        updatedValue = updater(String(f));
        const newValue = toValue(updatedValue);
        return newValue;
      });
    }
  };
}
function arrayProxy(superForm2, path, options) {
  const formErrors = fieldProxy(superForm2.errors, `${path}`);
  const onlyFieldErrors = derived(formErrors, ($errors) => {
    const output = [];
    for (const key in $errors) {
      if (key == "_errors")
        continue;
      output[key] = $errors[key];
    }
    return output;
  });
  function updateArrayErrors(errors, value) {
    for (const key in errors) {
      if (key == "_errors")
        continue;
      errors[key] = void 0;
    }
    if (value !== void 0) {
      for (const key in value) {
        errors[key] = value[key];
      }
    }
    return errors;
  }
  const fieldErrors = {
    subscribe: onlyFieldErrors.subscribe,
    update(upd) {
      formErrors.update(($errors) => (
        // @ts-expect-error Type is correct
        updateArrayErrors($errors, upd($errors))
      ));
    },
    set(value) {
      formErrors.update(($errors) => updateArrayErrors($errors, value));
    }
  };
  const values = superFieldProxy(superForm2, path, options);
  let lastLength = Array.isArray(get_store_value(values)) ? get_store_value(values).length : 0;
  values.subscribe(($values) => {
    const currentLength = Array.isArray($values) ? $values.length : 0;
    if (currentLength < lastLength) {
      superForm2.errors.update(($errors) => {
        const node = pathExists($errors, splitPath(path));
        if (!node)
          return $errors;
        for (const key in node.value) {
          if (Number(key) < currentLength)
            continue;
          delete node.value[key];
        }
        return $errors;
      }, { force: true });
    }
    lastLength = currentLength;
  });
  return {
    path,
    values,
    errors: fieldProxy(superForm2.errors, `${path}._errors`),
    valueErrors: fieldErrors
  };
}
function formFieldProxy(superForm2, path, options) {
  const path2 = splitPath(path);
  const constraintsPath = path2.filter((p) => /\D/.test(String(p))).join(".");
  const taintedProxy = derived(superForm2.tainted, ($tainted) => {
    if (!$tainted)
      return $tainted;
    const taintedPath = traversePath($tainted, path2);
    return taintedPath ? taintedPath.value : void 0;
  });
  const tainted = {
    subscribe: taintedProxy.subscribe,
    update(upd) {
      superForm2.tainted.update(($tainted) => {
        if (!$tainted)
          $tainted = {};
        const output = traversePath($tainted, path2, (path3) => {
          if (!path3.value)
            path3.parent[path3.key] = {};
          return path3.parent[path3.key];
        });
        if (output)
          output.parent[output.key] = upd(output.value);
        return $tainted;
      });
    },
    set(value) {
      superForm2.tainted.update(($tainted) => {
        if (!$tainted)
          $tainted = {};
        const output = traversePath($tainted, path2, (path3) => {
          if (!path3.value)
            path3.parent[path3.key] = {};
          return path3.parent[path3.key];
        });
        if (output)
          output.parent[output.key] = value;
        return $tainted;
      });
    }
  };
  return {
    path,
    value: superFieldProxy(superForm2, path, options),
    errors: fieldProxy(superForm2.errors, path),
    constraints: fieldProxy(superForm2.constraints, constraintsPath),
    tainted
  };
}
function updateProxyField(obj, path, updater) {
  const output = traversePath(obj, path, ({ parent, key, value }) => {
    if (value === void 0)
      parent[key] = /\D/.test(key) ? {} : [];
    return parent[key];
  });
  if (output) {
    const newValue = updater(output.value);
    output.parent[output.key] = newValue;
  }
  return obj;
}
function superFieldProxy(superForm2, path, baseOptions) {
  const form = superForm2.form;
  const path2 = splitPath(path);
  const proxy = derived(form, ($form) => {
    const data = traversePath($form, path2);
    return data == null ? void 0 : data.value;
  });
  return {
    subscribe(...params) {
      const unsub = proxy.subscribe(...params);
      return () => unsub();
    },
    update(upd, options) {
      form.update((data) => updateProxyField(data, path2, upd), options ?? baseOptions);
    },
    set(value, options) {
      form.update((data) => updateProxyField(data, path2, () => value), options ?? baseOptions);
    }
  };
}
function isSuperForm(form, options) {
  const isSuperForm2 = "form" in form;
  if (!isSuperForm2 && (options == null ? void 0 : options.taint) !== void 0) {
    throw new SuperFormError("If options.taint is set, the whole superForm object must be used as a proxy.");
  }
  return isSuperForm2;
}
function fieldProxy(form, path, options) {
  const path2 = splitPath(path);
  if (isSuperForm(form, options)) {
    return superFieldProxy(form, path, options);
  }
  const proxy = derived(form, ($form) => {
    const data = traversePath($form, path2);
    return data == null ? void 0 : data.value;
  });
  return {
    subscribe(...params) {
      const unsub = proxy.subscribe(...params);
      return () => unsub();
    },
    update(upd) {
      form.update((data) => updateProxyField(data, path2, upd));
    },
    set(value) {
      form.update((data) => updateProxyField(data, path2, () => value));
    }
  };
}
function localDate(date) {
  return date.getFullYear() + "-" + String(date.getMonth() + 1).padStart(2, "0") + "-" + String(date.getDate()).padStart(2, "0");
}
function localTime(date) {
  return String(date.getHours()).padStart(2, "0") + ":" + String(date.getMinutes()).padStart(2, "0");
}
function UTCDate(date) {
  return date.getUTCFullYear() + "-" + String(date.getUTCMonth() + 1).padStart(2, "0") + "-" + String(date.getUTCDate()).padStart(2, "0");
}
function UTCTime(date) {
  return String(date.getUTCHours()).padStart(2, "0") + ":" + String(date.getUTCMinutes()).padStart(2, "0");
}

// node_modules/sveltekit-superforms/dist/jsonSchema/schemaShape.js
function schemaShape(schema, path = []) {
  const output = _schemaShape(schema, path);
  if (!output)
    throw new SchemaError("No shape could be created for schema.", path);
  return output;
}
function _schemaShape(schema, path) {
  assertSchema(schema, path);
  const info = schemaInfo(schema, false, path);
  if (info.array || info.union) {
    const arr = info.array || [];
    const union = info.union || [];
    return arr.concat(union).reduce((shape, next) => {
      const nextShape = _schemaShape(next, path);
      if (nextShape)
        shape = { ...shape ?? {}, ...nextShape };
      return shape;
    }, arr.length ? {} : void 0);
  }
  if (info.properties) {
    const output = {};
    for (const [key, prop2] of Object.entries(info.properties)) {
      const shape = _schemaShape(prop2, [...path, key]);
      if (shape)
        output[key] = shape;
    }
    return output;
  }
  return info.types.includes("array") || info.types.includes("object") ? {} : void 0;
}
function shapeFromObject(obj) {
  let output = {};
  const isArray = Array.isArray(obj);
  for (const [key, value] of Object.entries(obj)) {
    if (!value || typeof value !== "object")
      continue;
    if (isArray)
      output = { ...output, ...shapeFromObject(value) };
    else
      output[key] = shapeFromObject(value);
  }
  return output;
}

// node_modules/sveltekit-superforms/dist/client/superForm.js
var formIds = /* @__PURE__ */ new WeakMap();
var initialForms = /* @__PURE__ */ new WeakMap();
var defaultOnError = (event2) => {
  console.warn("Unhandled error caught by Superforms, use onError event to handle it:", event2.result.error);
};
var defaultFormOptions = {
  applyAction: true,
  invalidateAll: true,
  resetForm: true,
  autoFocusOnError: "detect",
  scrollToError: "smooth",
  errorSelector: '[aria-invalid="true"],[data-invalid]',
  selectErrorText: false,
  stickyNavbar: void 0,
  taintedMessage: false,
  onSubmit: void 0,
  onResult: void 0,
  onUpdate: void 0,
  onUpdated: void 0,
  onError: defaultOnError,
  dataType: "form",
  validators: void 0,
  customValidity: false,
  clearOnSubmit: "message",
  delayMs: 500,
  timeoutMs: 8e3,
  multipleSubmits: "prevent",
  SPA: void 0,
  validationMethod: "auto"
};
function multipleFormIdError(id) {
  return `Duplicate form id's found: "${id}". Multiple forms will receive the same data. Use the id option to differentiate between them, or if this is intended, set the warnings.duplicateId option to false in superForm to disable this warning. More information: https://superforms.rocks/concepts/multiple-forms`;
}
var LEGACY_MODE = false;
try {
  if (SUPERFORMS_LEGACY)
    LEGACY_MODE = true;
} catch {
}
var STORYBOOK_MODE = false;
try {
  if (globalThis.STORIES)
    STORYBOOK_MODE = true;
} catch {
}
function superForm(form, formOptions) {
  var _a;
  let initialForm;
  let options = formOptions ?? {};
  let initialValidator = void 0;
  {
    if (options.legacy ?? LEGACY_MODE) {
      if (options.resetForm === void 0)
        options.resetForm = false;
      if (options.taintedMessage === void 0)
        options.taintedMessage = true;
    }
    if (STORYBOOK_MODE) {
      if (options.applyAction === void 0)
        options.applyAction = false;
    }
    if (typeof options.SPA === "string") {
      if (options.invalidateAll === void 0)
        options.invalidateAll = false;
      if (options.applyAction === void 0)
        options.applyAction = false;
    }
    initialValidator = options.validators;
    options = {
      ...defaultFormOptions,
      ...options
    };
    if ((options.SPA === true || typeof options.SPA === "object") && options.validators === void 0) {
      console.warn("No validators set for superForm in SPA mode. Add a validation adapter to the validators option, or set it to false to disable this warning.");
    }
    if (!form) {
      throw new SuperFormError("No form data sent to superForm. Make sure the output from superValidate is used (usually data.form) and that it's not null or undefined. Alternatively, an object with default values for the form can also be used, but then constraints won't be available.");
    }
    if (Context_isValidationObject(form) === false) {
      form = {
        id: options.id ?? Math.random().toString(36).slice(2, 10),
        valid: false,
        posted: false,
        errors: {},
        data: form,
        shape: shapeFromObject(form)
      };
    }
    form = form;
    const _initialFormId = form.id = options.id ?? form.id;
    const _currentPage = get_store_value(page2) ?? (STORYBOOK_MODE ? {} : void 0);
    if (browser4 && ((_a = options.warnings) == null ? void 0 : _a.duplicateId) !== false) {
      if (!formIds.has(_currentPage)) {
        formIds.set(_currentPage, /* @__PURE__ */ new Set([_initialFormId]));
      } else {
        const currentForms = formIds.get(_currentPage);
        if (currentForms == null ? void 0 : currentForms.has(_initialFormId)) {
          console.warn(multipleFormIdError(_initialFormId));
        } else {
          currentForms == null ? void 0 : currentForms.add(_initialFormId);
        }
      }
    }
    if (!initialForms.has(form)) {
      initialForms.set(form, form);
    }
    initialForm = initialForms.get(form);
    if (!browser4 && _currentPage.form && typeof _currentPage.form === "object") {
      const postedData = _currentPage.form;
      for (const postedForm of Context_findValidationForms(postedData).reverse()) {
        if (postedForm.id == _initialFormId && !initialForms.has(postedForm)) {
          initialForms.set(postedData, postedData);
          const pageDataForm = form;
          form = postedForm;
          form.constraints = pageDataForm.constraints;
          form.shape = pageDataForm.shape;
          if (form.valid && options.resetForm && (options.resetForm === true || options.resetForm())) {
            form = clone2(pageDataForm);
            form.message = clone2(postedForm.message);
          }
          break;
        }
      }
    } else {
      form = clone2(initialForm);
    }
    onDestroy(() => {
      var _a2;
      Unsubscriptions_unsubscribe();
      NextChange_clear();
      EnhancedForm_destroy();
      for (const events of Object.values(formEvents)) {
        events.length = 0;
      }
      (_a2 = formIds.get(_currentPage)) == null ? void 0 : _a2.delete(_initialFormId);
    });
    if (options.dataType !== "json") {
      const checkForNestedData = (key, value) => {
        if (!value || typeof value !== "object")
          return;
        if (Array.isArray(value)) {
          if (value.length > 0)
            checkForNestedData(key, value[0]);
        } else if (!(value instanceof Date) && !(value instanceof File) && (!browser4 || !(value instanceof FileList))) {
          throw new SuperFormError(`Object found in form field "${key}". Set the dataType option to "json" and add use:enhance to use nested data structures. More information: https://superforms.rocks/concepts/nested-data`);
        }
      };
      for (const [key, value] of Object.entries(form.data)) {
        checkForNestedData(key, value);
      }
    }
  }
  const __data = {
    formId: form.id,
    form: clone2(form.data),
    constraints: form.constraints ?? {},
    posted: form.posted,
    errors: clone2(form.errors),
    message: clone2(form.message),
    tainted: void 0,
    valid: form.valid,
    submitting: false,
    shape: form.shape
  };
  const Data = __data;
  const FormId = writable(options.id ?? form.id);
  const Context = {};
  function Context_findValidationForms(data) {
    const forms = Object.values(data).filter((v) => Context_isValidationObject(v) !== false);
    return forms;
  }
  function Context_isValidationObject(object) {
    if (!object || typeof object !== "object")
      return false;
    if (!("valid" in object && "errors" in object && typeof object.valid === "boolean")) {
      return false;
    }
    return "id" in object && typeof object.id === "string" ? object.id : false;
  }
  const _formData = writable(form.data);
  const Form2 = {
    subscribe: _formData.subscribe,
    set: (value, options2 = {}) => {
      const newData = clone2(value);
      Tainted_update(newData, options2.taint ?? true);
      return _formData.set(newData);
    },
    update: (updater, options2 = {}) => {
      return _formData.update((value) => {
        const newData = updater(value);
        Tainted_update(newData, options2.taint ?? true);
        return newData;
      });
    }
  };
  function Form_isSPA() {
    return options.SPA === true || typeof options.SPA === "object";
  }
  async function Form_validate(opts = {}) {
    const dataToValidate = opts.formData ?? Data.form;
    let errors = {};
    let status;
    const validator = opts.adapter ?? options.validators;
    if (typeof validator == "object") {
      if (validator != initialValidator && !("jsonSchema" in validator)) {
        throw new SuperFormError('Client validation adapter found in options.validators. A full adapter must be used when changing validators dynamically, for example "zod" instead of "zodClient".');
      }
      status = await validator.validate(dataToValidate);
      if (!status.success) {
        errors = mapErrors(status.issues, validator.shape ?? Data.shape ?? {});
      } else if (opts.recheckValidData !== false) {
        return Form_validate({ ...opts, recheckValidData: false });
      }
    } else {
      status = { success: true, data: {} };
    }
    const data = { ...Data.form, ...dataToValidate, ...status.success ? status.data : {} };
    return {
      valid: status.success,
      posted: false,
      errors,
      data,
      constraints: Data.constraints,
      message: void 0,
      id: Data.formId,
      shape: Data.shape
    };
  }
  function Form__changeEvent(event2) {
    if (!options.onChange || !event2.paths.length || event2.type == "blur")
      return;
    let changeEvent;
    const paths = event2.paths.map(mergePath);
    if (event2.type && event2.paths.length == 1 && event2.formElement && event2.target instanceof Element) {
      changeEvent = {
        path: paths[0],
        paths,
        formElement: event2.formElement,
        target: event2.target,
        set(path, value, options2) {
          fieldProxy({ form: Form2 }, path, options2).set(value);
        },
        get(path) {
          return get_store_value(fieldProxy(Form2, path));
        }
      };
    } else {
      changeEvent = {
        paths,
        target: void 0,
        set(path, value, options2) {
          fieldProxy({ form: Form2 }, path, options2).set(value);
        },
        get(path) {
          return get_store_value(fieldProxy(Form2, path));
        }
      };
    }
    options.onChange(changeEvent);
  }
  async function Form_clientValidation(event2, force = false, adapter) {
    if (event2) {
      if (options.validators == "clear") {
        Errors.update(($errors) => {
          setPaths($errors, event2.paths, void 0);
          return $errors;
        });
      }
      setTimeout(() => Form__changeEvent(event2));
    }
    let skipValidation = false;
    if (!force) {
      if (options.validationMethod == "onsubmit" || options.validationMethod == "submit-only") {
        skipValidation = true;
      } else if (options.validationMethod == "onblur" && (event2 == null ? void 0 : event2.type) == "input")
        skipValidation = true;
      else if (options.validationMethod == "oninput" && (event2 == null ? void 0 : event2.type) == "blur")
        skipValidation = true;
    }
    if (skipValidation || !event2 || !options.validators || options.validators == "clear") {
      if (event2 == null ? void 0 : event2.paths) {
        const formElement = (event2 == null ? void 0 : event2.formElement) ?? EnhancedForm_get();
        if (formElement)
          Form__clearCustomValidity(formElement, event2.paths);
      }
      return;
    }
    const result = await Form_validate({ adapter });
    if (result.valid && (event2.immediate || event2.type != "input")) {
      Form2.set(result.data, { taint: "ignore" });
    }
    await tick();
    Form__displayNewErrors(result.errors, event2, force);
    return result;
  }
  function Form__clearCustomValidity(formElement, paths) {
    const validity = /* @__PURE__ */ new Map();
    if (options.customValidity && formElement) {
      for (const path of paths) {
        const name = CSS.escape(mergePath(path));
        const el = formElement.querySelector(`[name="${name}"]`);
        if (el) {
          const message2 = "validationMessage" in el ? String(el.validationMessage) : "";
          validity.set(path.join("."), { el, message: message2 });
          updateCustomValidity(el, void 0);
        }
      }
    }
    return validity;
  }
  async function Form__displayNewErrors(errors, event2, force) {
    const { type, immediate, multiple, paths } = event2;
    const previous = Data.errors;
    const output = {};
    let validity = /* @__PURE__ */ new Map();
    const formElement = event2.formElement ?? EnhancedForm_get();
    if (formElement)
      validity = Form__clearCustomValidity(formElement, event2.paths);
    traversePaths(errors, (error) => {
      if (!Array.isArray(error.value))
        return;
      const currentPath = [...error.path];
      if (currentPath[currentPath.length - 1] == "_errors") {
        currentPath.pop();
      }
      const joinedPath = currentPath.join(".");
      function addError() {
        setPaths(output, [error.path], error.value);
        if (options.customValidity && isEventError && validity.has(joinedPath)) {
          const { el, message: message2 } = validity.get(joinedPath);
          if (message2 != error.value) {
            updateCustomValidity(el, error.value);
            validity.clear();
          }
        }
      }
      if (force)
        return addError();
      const lastPath = error.path[error.path.length - 1];
      const isObjectError = lastPath == "_errors";
      const isEventError = error.value && paths.some((path) => {
        return isObjectError ? currentPath && path && currentPath.length > 0 && currentPath[0] == path[0] : joinedPath == path.join(".");
      });
      if (isEventError && options.validationMethod == "oninput")
        return addError();
      if (immediate && !multiple && isEventError)
        return addError();
      if (multiple) {
        const errorPath = pathExists(get_store_value(Errors), error.path.slice(0, -1));
        if ((errorPath == null ? void 0 : errorPath.value) && typeof (errorPath == null ? void 0 : errorPath.value) == "object") {
          for (const errors2 of Object.values(errorPath.value)) {
            if (Array.isArray(errors2)) {
              return addError();
            }
          }
        }
      }
      const previousError = pathExists(previous, error.path);
      if (previousError && previousError.key in previousError.parent) {
        return addError();
      }
      if (isObjectError) {
        if (options.validationMethod == "oninput" || type == "blur" && Tainted_hasBeenTainted(mergePath(error.path.slice(0, -1)))) {
          return addError();
        }
      } else {
        if (type == "blur" && isEventError) {
          return addError();
        }
      }
    });
    Errors.set(output);
  }
  function Form_set(data, options2 = {}) {
    if (options2.keepFiles) {
      traversePaths(Data.form, (info) => {
        if ((!browser4 || !(info.parent instanceof FileList)) && (info.value instanceof File || browser4 && info.value instanceof FileList)) {
          const dataPath = pathExists(data, info.path);
          if (!dataPath || !(dataPath.key in dataPath.parent)) {
            setPaths(data, [info.path], info.value);
          }
        }
      });
    }
    return Form2.set(data, options2);
  }
  function Form_shouldReset(validForm, successActionResult) {
    return validForm && successActionResult && options.resetForm && (options.resetForm === true || options.resetForm());
  }
  async function Form_updateFromValidation(form2, successResult) {
    if (form2.valid && successResult && Form_shouldReset(form2.valid, successResult)) {
      Form_reset({ message: form2.message, posted: true });
    } else {
      rebind({
        form: form2,
        untaint: successResult,
        keepFiles: true,
        // Check if the form data should be used for updating, or if the invalidateAll load function should be used:
        skipFormData: options.invalidateAll == "force"
      });
    }
    if (formEvents.onUpdated.length) {
      await tick();
    }
    for (const event2 of formEvents.onUpdated) {
      event2({ form: form2 });
    }
  }
  function Form_reset(opts = {}) {
    if (opts.newState)
      initialForm.data = { ...initialForm.data, ...opts.newState };
    const resetData = clone2(initialForm);
    resetData.data = { ...resetData.data, ...opts.data };
    if (opts.id !== void 0)
      resetData.id = opts.id;
    rebind({
      form: resetData,
      untaint: true,
      message: opts.message,
      keepFiles: false,
      posted: opts.posted,
      resetted: true
    });
  }
  async function Form_updateFromActionResult(result) {
    if (result.type == "error") {
      throw new SuperFormError(`ActionResult of type "${result.type}" cannot be passed to update function.`);
    }
    if (result.type == "redirect") {
      if (Form_shouldReset(true, true))
        Form_reset({ posted: true });
      return;
    }
    if (typeof result.data !== "object") {
      throw new SuperFormError("Non-object validation data returned from ActionResult.");
    }
    const forms = Context_findValidationForms(result.data);
    if (!forms.length) {
      throw new SuperFormError("No form data returned from ActionResult. Make sure you return { form } in the form actions.");
    }
    for (const newForm of forms) {
      if (newForm.id !== Data.formId)
        continue;
      await Form_updateFromValidation(newForm, result.status >= 200 && result.status < 300);
    }
  }
  const Message = writable(__data.message);
  const Constraints = writable(__data.constraints);
  const Posted = writable(__data.posted);
  const Shape = writable(__data.shape);
  const _errors = writable(form.errors);
  const Errors = {
    subscribe: _errors.subscribe,
    set(value, options2) {
      return _errors.set(updateErrors(value, Data.errors, options2 == null ? void 0 : options2.force));
    },
    update(updater, options2) {
      return _errors.update((value) => {
        return updateErrors(updater(value), Data.errors, options2 == null ? void 0 : options2.force);
      });
    },
    /**
     * To work with client-side validation, errors cannot be deleted but must
     * be set to undefined, to know where they existed before (tainted+error check in oninput)
     */
    clear: () => Errors.set({})
  };
  let NextChange = null;
  function NextChange_setHtmlEvent(event2) {
    var _a2;
    if (NextChange && event2 && Object.keys(event2).length == 1 && ((_a2 = event2.paths) == null ? void 0 : _a2.length) && NextChange.target && NextChange.target instanceof HTMLInputElement && NextChange.target.type.toLowerCase() == "file") {
      NextChange.paths = event2.paths;
    } else {
      NextChange = event2;
    }
    setTimeout(() => {
      Form_clientValidation(NextChange);
    }, 0);
  }
  function NextChange_additionalEventInformation(event2, immediate, multiple, formElement, target) {
    if (NextChange === null) {
      NextChange = { paths: [] };
    }
    NextChange.type = event2;
    NextChange.immediate = immediate;
    NextChange.multiple = multiple;
    NextChange.formElement = formElement;
    NextChange.target = target;
  }
  function NextChange_paths() {
    return (NextChange == null ? void 0 : NextChange.paths) ?? [];
  }
  function NextChange_clear() {
    NextChange = null;
  }
  const Tainted = {
    defaultMessage: "Leave page? Changes that you made may not be saved.",
    state: writable(),
    message: options.taintedMessage,
    clean: clone2(form.data),
    // Important to clone form.data, so it's not comparing the same object,
    forceRedirection: false
  };
  function Tainted_isEnabled() {
    return options.taintedMessage && !Data.submitting && !Tainted.forceRedirection && Tainted_isTainted();
  }
  function Tainted_checkUnload(e) {
    if (!Tainted_isEnabled())
      return;
    e.preventDefault();
    e.returnValue = "";
    const { taintedMessage } = options;
    const isTaintedFunction = typeof taintedMessage === "function";
    const confirmationMessage = isTaintedFunction || taintedMessage === true ? Tainted.defaultMessage : taintedMessage;
    (e || window.event).returnValue = confirmationMessage || Tainted.defaultMessage;
    return confirmationMessage;
  }
  async function Tainted_beforeNav(nav) {
    if (!Tainted_isEnabled())
      return;
    const { taintedMessage } = options;
    const isTaintedFunction = typeof taintedMessage === "function";
    if (isTaintedFunction)
      nav.cancel();
    if (nav.type === "leave") {
      return;
    }
    const message2 = isTaintedFunction || taintedMessage === true ? Tainted.defaultMessage : taintedMessage;
    let shouldRedirect;
    try {
      shouldRedirect = isTaintedFunction ? await taintedMessage() : window.confirm(message2 || Tainted.defaultMessage);
    } catch {
      shouldRedirect = false;
    }
    if (shouldRedirect && nav.to) {
      try {
        Tainted.forceRedirection = true;
        await goto(nav.to.url, { ...nav.to.params });
        return;
      } finally {
        Tainted.forceRedirection = false;
      }
    } else if (!shouldRedirect && !isTaintedFunction) {
      nav.cancel();
    }
  }
  function Tainted_enable() {
    options.taintedMessage = Tainted.message;
  }
  function Tainted_currentState() {
    return Tainted.state;
  }
  function Tainted_hasBeenTainted(path) {
    if (!Data.tainted)
      return false;
    if (!path)
      return !!Data.tainted;
    const field = pathExists(Data.tainted, splitPath(path));
    return !!field && field.key in field.parent;
  }
  function Tainted_isTainted(path) {
    if (typeof path === "boolean")
      return path;
    if (typeof path === "object")
      return Tainted__isObjectTainted(path);
    if (!Data.tainted)
      return false;
    if (!path)
      return Tainted__isObjectTainted(Data.tainted);
    const field = pathExists(Data.tainted, splitPath(path));
    return Tainted__isObjectTainted(field == null ? void 0 : field.value);
  }
  function Tainted__isObjectTainted(obj) {
    if (!obj)
      return false;
    if (typeof obj === "object") {
      for (const obj2 of Object.values(obj)) {
        if (Tainted__isObjectTainted(obj2))
          return true;
      }
    }
    return obj === true;
  }
  function Tainted_update(newData, taintOptions) {
    if (taintOptions == "ignore")
      return;
    const paths = comparePaths(newData, Data.form);
    const newTainted = comparePaths(newData, Tainted.clean).map((path) => path.join());
    if (paths.length) {
      if (taintOptions == "untaint-all" || taintOptions == "untaint-form") {
        Tainted.state.set(void 0);
      } else {
        Tainted.state.update((currentlyTainted) => {
          if (!currentlyTainted)
            currentlyTainted = {};
          setPaths(currentlyTainted, paths, (path, data) => {
            if (!newTainted.includes(path.join()))
              return void 0;
            const currentValue = traversePath(newData, path);
            const cleanPath = traversePath(Tainted.clean, path);
            return currentValue && cleanPath && currentValue.value === cleanPath.value ? void 0 : taintOptions === true ? true : taintOptions === "untaint" ? void 0 : data.value;
          });
          return currentlyTainted;
        });
      }
    }
    NextChange_setHtmlEvent({ paths });
  }
  function Tainted_set(tainted, newClean) {
    Tainted.state.set(tainted);
    if (newClean)
      Tainted.clean = newClean;
  }
  const Submitting = writable(false);
  const Delayed = writable(false);
  const Timeout = writable(false);
  const Unsubscriptions = [
    // eslint-disable-next-line dci-lint/private-role-access
    Tainted.state.subscribe((tainted) => __data.tainted = clone2(tainted)),
    // eslint-disable-next-line dci-lint/private-role-access
    Form2.subscribe((form2) => __data.form = clone2(form2)),
    // eslint-disable-next-line dci-lint/private-role-access
    Errors.subscribe((errors) => __data.errors = clone2(errors)),
    FormId.subscribe((id) => __data.formId = id),
    Constraints.subscribe((constraints2) => __data.constraints = constraints2),
    Posted.subscribe((posted) => __data.posted = posted),
    Message.subscribe((message2) => __data.message = message2),
    Submitting.subscribe((submitting) => __data.submitting = submitting),
    Shape.subscribe((shape) => __data.shape = shape)
  ];
  function Unsubscriptions_add(func) {
    Unsubscriptions.push(func);
  }
  function Unsubscriptions_unsubscribe() {
    Unsubscriptions.forEach((unsub) => unsub());
  }
  let EnhancedForm;
  function EnhancedForm_get() {
    return EnhancedForm;
  }
  function EnhancedForm_createFromSPA(action) {
    EnhancedForm = document.createElement("form");
    EnhancedForm.method = "POST";
    EnhancedForm.action = action;
    superFormEnhance(EnhancedForm);
    document.body.appendChild(EnhancedForm);
  }
  function EnhancedForm_setAction(action) {
    if (EnhancedForm)
      EnhancedForm.action = action;
  }
  function EnhancedForm_destroy() {
    if (EnhancedForm == null ? void 0 : EnhancedForm.parentElement) {
      EnhancedForm.remove();
    }
    EnhancedForm = void 0;
  }
  const AllErrors = derived(Errors, ($errors) => $errors ? flattenErrors($errors) : []);
  options.taintedMessage = void 0;
  function rebind(opts) {
    const form2 = opts.form;
    const message2 = opts.message ?? form2.message;
    if (opts.untaint || opts.resetted) {
      Tainted_set(typeof opts.untaint === "boolean" ? void 0 : opts.untaint, form2.data);
    }
    if (opts.skipFormData !== true) {
      Form_set(form2.data, {
        taint: "ignore",
        keepFiles: opts.keepFiles
      });
    }
    Message.set(message2);
    if (opts.resetted)
      Errors.update(() => ({}), { force: true });
    else
      Errors.set(form2.errors);
    FormId.set(form2.id);
    Posted.set(opts.posted ?? form2.posted);
    if (form2.constraints)
      Constraints.set(form2.constraints);
    if (form2.shape)
      Shape.set(form2.shape);
    __data.valid = form2.valid;
    if (options.flashMessage && shouldSyncFlash(options)) {
      const flash = options.flashMessage.module.getFlash(page2);
      if (message2 && get_store_value(flash) === void 0) {
        flash.set(message2);
      }
    }
  }
  const formEvents = {
    onSubmit: options.onSubmit ? [options.onSubmit] : [],
    onResult: options.onResult ? [options.onResult] : [],
    onUpdate: options.onUpdate ? [options.onUpdate] : [],
    onUpdated: options.onUpdated ? [options.onUpdated] : [],
    onError: options.onError ? [options.onError] : []
  };
  if (browser4) {
    window.addEventListener("beforeunload", Tainted_checkUnload);
    onDestroy(() => {
      window.removeEventListener("beforeunload", Tainted_checkUnload);
    });
    beforeNavigate(Tainted_beforeNav);
    Unsubscriptions_add(page2.subscribe(async (pageUpdate) => {
      if (STORYBOOK_MODE && pageUpdate === void 0) {
        pageUpdate = { status: 200 };
      }
      const successResult = pageUpdate.status >= 200 && pageUpdate.status < 300;
      if (options.applyAction && pageUpdate.form && typeof pageUpdate.form === "object") {
        const actionData = pageUpdate.form;
        if (actionData.type == "error")
          return;
        for (const newForm of Context_findValidationForms(actionData)) {
          const isInitial = initialForms.has(newForm);
          if (newForm.id !== Data.formId || isInitial) {
            continue;
          }
          initialForms.set(newForm, newForm);
          await Form_updateFromValidation(newForm, successResult);
        }
      } else if (pageUpdate.data && typeof pageUpdate.data === "object") {
        for (const newForm of Context_findValidationForms(pageUpdate.data)) {
          const isInitial = initialForms.has(newForm);
          if (newForm.id !== Data.formId || isInitial) {
            continue;
          }
          if (options.invalidateAll === "force") {
            initialForm.data = newForm.data;
          }
          const resetStatus = Form_shouldReset(true, true);
          rebind({
            form: newForm,
            untaint: successResult,
            keepFiles: !resetStatus,
            resetted: resetStatus
          });
        }
      }
    }));
    if (typeof options.SPA === "string") {
      EnhancedForm_createFromSPA(options.SPA);
    }
  }
  function superFormEnhance(FormElement, events) {
    if (options.SPA !== void 0 && FormElement.method == "get")
      FormElement.method = "post";
    if (typeof options.SPA === "string") {
      if (options.SPA.length && FormElement.action == document.location.href) {
        FormElement.action = options.SPA;
      }
    } else {
      EnhancedForm = FormElement;
    }
    if (events) {
      if (events.onError) {
        if (options.onError === "apply") {
          throw new SuperFormError('options.onError is set to "apply", cannot add any onError events.');
        } else if (events.onError === "apply") {
          throw new SuperFormError('Cannot add "apply" as onError event in use:enhance.');
        }
        formEvents.onError.push(events.onError);
      }
      if (events.onResult)
        formEvents.onResult.push(events.onResult);
      if (events.onSubmit)
        formEvents.onSubmit.push(events.onSubmit);
      if (events.onUpdate)
        formEvents.onUpdate.push(events.onUpdate);
      if (events.onUpdated)
        formEvents.onUpdated.push(events.onUpdated);
    }
    Tainted_enable();
    let lastInputChange;
    async function onInput(e) {
      const info = inputInfo(e.target);
      if (info.immediate && !info.file)
        await new Promise((r) => setTimeout(r, 0));
      lastInputChange = NextChange_paths();
      NextChange_additionalEventInformation("input", info.immediate, info.multiple, FormElement, e.target ?? void 0);
    }
    async function onBlur(e) {
      if (Data.submitting)
        return;
      if (!lastInputChange || NextChange_paths() != lastInputChange) {
        return;
      }
      const info = inputInfo(e.target);
      if (info.immediate && !info.file)
        await new Promise((r) => setTimeout(r, 0));
      Form_clientValidation({
        paths: lastInputChange,
        immediate: info.multiple,
        multiple: info.multiple,
        type: "blur",
        formElement: FormElement,
        target: e.target ?? void 0
      });
      lastInputChange = void 0;
    }
    FormElement.addEventListener("focusout", onBlur);
    FormElement.addEventListener("input", onInput);
    onDestroy(() => {
      FormElement.removeEventListener("focusout", onBlur);
      FormElement.removeEventListener("input", onInput);
    });
    const htmlForm = Form(FormElement, { submitting: Submitting, delayed: Delayed, timeout: Timeout }, options);
    let currentRequest;
    return kitEnhance(FormElement, async (submitParams) => {
      let jsonData = void 0;
      let validationAdapter = options.validators;
      const submit = {
        ...submitParams,
        jsonData(data) {
          if (options.dataType !== "json") {
            throw new SuperFormError("options.dataType must be set to 'json' to use jsonData.");
          }
          jsonData = data;
        },
        validators(adapter) {
          validationAdapter = adapter;
        }
      };
      const _submitCancel = submit.cancel;
      let cancelled = false;
      function clientValidationResult(validation) {
        var _a2;
        const validationResult = { ...validation, posted: true };
        const status = validationResult.valid ? 200 : (typeof options.SPA === "boolean" || typeof options.SPA === "string" ? void 0 : (_a2 = options.SPA) == null ? void 0 : _a2.failStatus) ?? 400;
        const data = { form: validationResult };
        const result = validationResult.valid ? { type: "success", status, data } : { type: "failure", status, data };
        setTimeout(() => validationResponse({ result }), 0);
      }
      function clearOnSubmit() {
        switch (options.clearOnSubmit) {
          case "errors-and-message":
            Errors.clear();
            Message.set(void 0);
            break;
          case "errors":
            Errors.clear();
            break;
          case "message":
            Message.set(void 0);
            break;
        }
      }
      function cancel(opts = {
        resetTimers: true
      }) {
        cancelled = true;
        if (opts.resetTimers && htmlForm.isSubmitting()) {
          htmlForm.completed({ cancelled });
        }
        return _submitCancel();
      }
      submit.cancel = cancel;
      if (htmlForm.isSubmitting() && options.multipleSubmits == "prevent") {
        cancel({ resetTimers: false });
      } else {
        if (htmlForm.isSubmitting() && options.multipleSubmits == "abort") {
          if (currentRequest)
            currentRequest.abort();
        }
        htmlForm.submitting();
        currentRequest = submit.controller;
        for (const event2 of formEvents.onSubmit) {
          await event2(submit);
        }
      }
      if (cancelled && options.flashMessage)
        cancelFlash(options);
      if (!cancelled) {
        const noValidate = !Form_isSPA() && (FormElement.noValidate || (submit.submitter instanceof HTMLButtonElement || submit.submitter instanceof HTMLInputElement) && submit.submitter.formNoValidate);
        let validation = void 0;
        const validateForm = async () => {
          return await Form_validate({ adapter: validationAdapter });
        };
        clearOnSubmit();
        if (!noValidate) {
          validation = await validateForm();
          if (!validation.valid) {
            cancel({ resetTimers: false });
            clientValidationResult(validation);
          }
        }
        if (!cancelled) {
          if (options.flashMessage && (options.clearOnSubmit == "errors-and-message" || options.clearOnSubmit == "message") && shouldSyncFlash(options)) {
            options.flashMessage.module.getFlash(page2).set(void 0);
          }
          const submitData = "formData" in submit ? submit.formData : submit.data;
          lastInputChange = void 0;
          if (Form_isSPA()) {
            if (!validation)
              validation = await validateForm();
            cancel({ resetTimers: false });
            clientValidationResult(validation);
          } else if (options.dataType === "json") {
            if (!validation)
              validation = await validateForm();
            const postData = clone2(jsonData ?? validation.data);
            traversePaths(postData, (data) => {
              if (data.value instanceof File) {
                const key = "__superform_file_" + mergePath(data.path);
                submitData.append(key, data.value);
                return data.set(void 0);
              } else if (Array.isArray(data.value) && data.value.length && data.value.every((v) => v instanceof File)) {
                const key = "__superform_files_" + mergePath(data.path);
                for (const file of data.value) {
                  submitData.append(key, file);
                }
                return data.set(void 0);
              }
            });
            Object.keys(postData).forEach((key) => {
              if (typeof submitData.get(key) === "string") {
                submitData.delete(key);
              }
            });
            const chunks = chunkSubstr(stringify2(postData), options.jsonChunkSize ?? 5e5);
            for (const chunk of chunks) {
              submitData.append("__superform_json", chunk);
            }
          }
          if (!submitData.has("__superform_id")) {
            const id = Data.formId;
            if (id !== void 0)
              submitData.set("__superform_id", id);
          }
          if (typeof options.SPA === "string") {
            EnhancedForm_setAction(options.SPA);
          }
        }
      }
      function chunkSubstr(str, size) {
        const numChunks = Math.ceil(str.length / size);
        const chunks = new Array(numChunks);
        for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
          chunks[i] = str.substring(o, o + size);
        }
        return chunks;
      }
      async function validationResponse(event2) {
        var _a2;
        let cancelled2 = false;
        currentRequest = null;
        let result = "type" in event2.result && "status" in event2.result ? event2.result : {
          type: "error",
          status: parseInt(String(event2.result.status)) || 500,
          error: event2.result.error instanceof Error ? event2.result.error : event2.result
        };
        const cancel2 = () => cancelled2 = true;
        const data = {
          result,
          formEl: FormElement,
          formElement: FormElement,
          cancel: cancel2
        };
        const unsubCheckforNav = STORYBOOK_MODE || !Form_isSPA() ? () => {
        } : navigating.subscribe(($nav) => {
          var _a3, _b;
          if (!$nav || ((_a3 = $nav.from) == null ? void 0 : _a3.route.id) === ((_b = $nav.to) == null ? void 0 : _b.route.id))
            return;
          cancel2();
        });
        for (const event3 of formEvents.onResult) {
          await event3(data);
        }
        result = data.result;
        if (!cancelled2) {
          if ((result.type === "success" || result.type == "failure") && result.data) {
            const forms = Context_findValidationForms(result.data);
            if (!forms.length) {
              throw new SuperFormError("No form data returned from ActionResult. Make sure you return { form } in the form actions.");
            }
            for (const newForm of forms) {
              if (newForm.id !== Data.formId)
                continue;
              const data2 = {
                form: newForm,
                formEl: FormElement,
                formElement: FormElement,
                cancel: () => cancelled2 = true,
                result
              };
              for (const event3 of formEvents.onUpdate) {
                await event3(data2);
              }
              result = data2.result;
              if (!cancelled2) {
                if (options.customValidity) {
                  setCustomValidityForm(FormElement, data2.form.errors);
                }
                if (Form_shouldReset(data2.form.valid, result.type == "success")) {
                  data2.formElement.querySelectorAll('input[type="file"]').forEach((e) => e.value = "");
                }
              }
            }
          }
          if (!cancelled2) {
            if (result.type !== "error") {
              if (result.type === "success" && options.invalidateAll) {
                await invalidateAll();
              }
              if (options.applyAction) {
                await applyAction(result);
              } else {
                await Form_updateFromActionResult(result);
              }
            } else {
              if (options.applyAction) {
                if (options.onError == "apply") {
                  await applyAction(result);
                } else {
                  const failResult = {
                    type: "failure",
                    status: Math.floor(result.status || 500),
                    data: result
                  };
                  await applyAction(failResult);
                }
              }
              if (options.onError !== "apply") {
                const data2 = { result, message: Message };
                for (const onErrorEvent of formEvents.onError) {
                  if (onErrorEvent !== "apply" && (onErrorEvent != defaultOnError || !((_a2 = options.flashMessage) == null ? void 0 : _a2.onError))) {
                    await onErrorEvent(data2);
                  }
                }
              }
            }
            if (options.flashMessage) {
              if (result.type == "error" && options.flashMessage.onError) {
                await options.flashMessage.onError({
                  result,
                  flashMessage: options.flashMessage.module.getFlash(page2)
                });
              }
            }
          }
        }
        if (cancelled2 && options.flashMessage) {
          cancelFlash(options);
        }
        if (cancelled2 || result.type != "redirect") {
          htmlForm.completed({ cancelled: cancelled2 });
        } else if (STORYBOOK_MODE) {
          htmlForm.completed({ cancelled: cancelled2, clearAll: true });
        } else {
          const unsub = navigating.subscribe(($nav) => {
            if ($nav)
              return;
            setTimeout(() => {
              try {
                if (unsub)
                  unsub();
              } catch {
              }
            });
            if (htmlForm.isSubmitting()) {
              htmlForm.completed({ cancelled: cancelled2, clearAll: true });
            }
          });
        }
        unsubCheckforNav();
      }
      return validationResponse;
    });
  }
  function removeFiles2(formData) {
    const paths = [];
    traversePaths(formData, (data2) => {
      if (data2.value instanceof File) {
        paths.push(data2.path);
        return "skip";
      } else if (Array.isArray(data2.value) && data2.value.length && data2.value.every((d) => d instanceof File)) {
        paths.push(data2.path);
        return "skip";
      }
    });
    if (!paths.length)
      return { data: formData, paths };
    const data = clone2(formData);
    setPaths(data, paths, (path) => {
      var _a2;
      return (_a2 = pathExists(initialForm.data, path)) == null ? void 0 : _a2.value;
    });
    return { data, paths };
  }
  return {
    form: Form2,
    formId: FormId,
    errors: Errors,
    message: Message,
    constraints: Constraints,
    tainted: Tainted_currentState(),
    submitting: readonly(Submitting),
    delayed: readonly(Delayed),
    timeout: readonly(Timeout),
    options,
    capture() {
      const { data, paths } = removeFiles2(Data.form);
      let tainted = Data.tainted;
      if (paths.length) {
        tainted = clone2(tainted) ?? {};
        setPaths(tainted, paths, false);
      }
      return {
        valid: Data.valid,
        posted: Data.posted,
        errors: Data.errors,
        data,
        constraints: Data.constraints,
        message: Data.message,
        id: Data.formId,
        tainted,
        shape: Data.shape
      };
    },
    restore: (snapshot) => {
      rebind({ form: snapshot, untaint: snapshot.tainted ?? true });
    },
    async validate(path, opts = {}) {
      if (!options.validators) {
        throw new SuperFormError("options.validators must be set to use the validate method.");
      }
      if (opts.update === void 0)
        opts.update = true;
      if (opts.taint === void 0)
        opts.taint = false;
      if (typeof opts.errors == "string")
        opts.errors = [opts.errors];
      let data;
      const splittedPath = splitPath(path);
      if ("value" in opts) {
        if (opts.update === true || opts.update === "value") {
          Form2.update(($form) => {
            setPaths($form, [splittedPath], opts.value);
            return $form;
          }, { taint: opts.taint });
          data = Data.form;
        } else {
          data = clone2(Data.form);
          setPaths(data, [splittedPath], opts.value);
        }
      } else {
        data = Data.form;
      }
      const result = await Form_validate({ formData: data });
      const error = pathExists(result.errors, splittedPath);
      if (error && error.value && opts.errors) {
        error.value = opts.errors;
      }
      if (opts.update === true || opts.update == "errors") {
        Errors.update(($errors) => {
          setPaths($errors, [splittedPath], error == null ? void 0 : error.value);
          return $errors;
        });
      }
      return error == null ? void 0 : error.value;
    },
    async validateForm(opts = {}) {
      if (!options.validators && !opts.schema) {
        throw new SuperFormError("options.validators or the schema option must be set to use the validateForm method.");
      }
      const result = opts.update ? await Form_clientValidation({ paths: [] }, true, opts.schema) : Form_validate({ adapter: opts.schema });
      const enhancedForm = EnhancedForm_get();
      if (opts.update && enhancedForm) {
        setTimeout(() => {
          if (!enhancedForm)
            return;
          scrollToFirstError(enhancedForm, {
            ...options,
            scrollToError: opts.focusOnError === false ? "off" : options.scrollToError
          });
        }, 1);
      }
      return result || Form_validate({ adapter: opts.schema });
    },
    allErrors: AllErrors,
    posted: Posted,
    reset(options2) {
      return Form_reset({
        message: (options2 == null ? void 0 : options2.keepMessage) ? Data.message : void 0,
        data: options2 == null ? void 0 : options2.data,
        id: options2 == null ? void 0 : options2.id,
        newState: options2 == null ? void 0 : options2.newState
      });
    },
    submit(submitter) {
      const form2 = EnhancedForm_get() ? EnhancedForm_get() : submitter && submitter instanceof HTMLElement ? submitter.closest("form") : void 0;
      if (!form2) {
        throw new SuperFormError("use:enhance must be added to the form to use submit, or pass a HTMLElement inside the form (or the form itself) as an argument.");
      }
      if (!form2.requestSubmit) {
        return form2.submit();
      }
      const isSubmitButton = submitter && (submitter instanceof HTMLButtonElement && submitter.type == "submit" || submitter instanceof HTMLInputElement && ["submit", "image"].includes(submitter.type));
      form2.requestSubmit(isSubmitButton ? submitter : void 0);
    },
    isTainted: Tainted_isTainted,
    enhance: superFormEnhance
  };
}

// node_modules/sveltekit-superforms/dist/defaults.js
function defaults(data, adapter, options) {
  if (data && "superFormValidationLibrary" in data) {
    options = adapter;
    adapter = data;
    data = null;
  }
  const validator = adapter;
  const optionDefaults = (options == null ? void 0 : options.defaults) ?? validator.defaults;
  return {
    id: (options == null ? void 0 : options.id) ?? validator.id ?? "",
    valid: false,
    posted: false,
    errors: {},
    data: { ...optionDefaults, ...data },
    constraints: validator.constraints,
    shape: validator.shape
  };
}
function defaultValues2(adapter) {
  return adapter.defaults;
}

// node_modules/sveltekit-superforms/dist/actionResult.js
import { json } from "@sveltejs/kit";
function actionResult(type, data, options) {
  function cookieData() {
    var _a, _b, _c, _d;
    if (typeof options === "number" || !(options == null ? void 0 : options.message))
      return "";
    const extra = [
      `Path=${((_a = options == null ? void 0 : options.cookieOptions) == null ? void 0 : _a.path) || "/"}`,
      `Max-Age=${((_b = options == null ? void 0 : options.cookieOptions) == null ? void 0 : _b.maxAge) || 120}`,
      `SameSite=${((_c = options == null ? void 0 : options.cookieOptions) == null ? void 0 : _c.sameSite) ?? "Strict"}`
    ];
    if ((_d = options == null ? void 0 : options.cookieOptions) == null ? void 0 : _d.secure) {
      extra.push(`Secure`);
    }
    return `flash=${encodeURIComponent(JSON.stringify(options.message))}; ` + extra.join("; ");
  }
  const status = options && typeof options !== "number" ? options.status : options;
  const result = (struct) => {
    return json({ type, ...struct }, {
      status: struct.status,
      headers: typeof options === "object" && options.message ? {
        "Set-Cookie": cookieData()
      } : void 0
    });
  };
  if (type == "error") {
    return result({
      status: status || 500,
      error: typeof data === "string" ? { message: data } : data
    });
  } else if (type == "redirect") {
    return result({
      status: status || 303,
      location: data
    });
  } else if (type == "failure") {
    return result({
      status: status || 400,
      data: stringify2(data)
    });
  } else {
    return result({ status: status || 200, data: stringify2(data) });
  }
}

// node_modules/sveltekit-superforms/dist/superValidate.js
import { fail as kitFail } from "@sveltejs/kit";

// node_modules/sveltekit-superforms/dist/formData.js
var legacyMode = false;
try {
  if (SUPERFORMS_LEGACY)
    legacyMode = true;
} catch {
}
var unionError = 'FormData parsing failed: Unions are only supported when the dataType option for superForm is set to "json".';
async function parseRequest(data, schemaData, options) {
  let parsed;
  if (data instanceof FormData) {
    parsed = parseFormData(data, schemaData, options);
  } else if (data instanceof URL || data instanceof URLSearchParams) {
    parsed = parseSearchParams(data, schemaData, options);
  } else if (data instanceof Request) {
    parsed = await tryParseFormData(data, schemaData, options);
  } else if (
    // RequestEvent
    data && typeof data === "object" && "request" in data && data.request instanceof Request
  ) {
    parsed = await tryParseFormData(data.request, schemaData, options);
  } else {
    parsed = {
      id: void 0,
      data,
      posted: false
    };
  }
  return parsed;
}
async function tryParseFormData(request, schemaData, options) {
  let formData = void 0;
  try {
    formData = await request.formData();
  } catch (e) {
    if (e instanceof TypeError && e.message.includes("already been consumed")) {
      throw e;
    }
    return { id: void 0, data: void 0, posted: false };
  }
  return parseFormData(formData, schemaData, options);
}
function parseSearchParams(data, schemaData, options) {
  if (data instanceof URL)
    data = data.searchParams;
  const convert = new FormData();
  for (const [key, value] of data.entries()) {
    convert.append(key, value);
  }
  const output = parseFormData(convert, schemaData, options);
  output.posted = false;
  return output;
}
function parseFormData(formData, schemaData, options) {
  var _a;
  function tryParseSuperJson() {
    if (formData.has("__superform_json")) {
      try {
        const output = parse(formData.getAll("__superform_json").join("") ?? "");
        if (typeof output === "object") {
          const filePaths = Array.from(formData.keys());
          for (const path of filePaths.filter((path2) => path2.startsWith("__superform_file_"))) {
            const realPath = splitPath(path.substring(17));
            setPaths(output, [realPath], formData.get(path));
          }
          for (const path of filePaths.filter((path2) => path2.startsWith("__superform_files_"))) {
            const realPath = splitPath(path.substring(18));
            const allFiles = formData.getAll(path);
            setPaths(output, [realPath], Array.from(allFiles));
          }
          return output;
        }
      } catch {
      }
    }
    return null;
  }
  const data = tryParseSuperJson();
  const id = (_a = formData.get("__superform_id")) == null ? void 0 : _a.toString();
  return data ? { id, data, posted: true } : {
    id,
    data: _parseFormData(formData, schemaData, options),
    posted: true
  };
}
function _parseFormData(formData, schema, options) {
  var _a, _b, _c, _d;
  const output = {};
  let schemaKeys;
  if (options == null ? void 0 : options.strict) {
    schemaKeys = new Set([...formData.keys()].filter((key) => !key.startsWith("__superform_")));
  } else {
    let unionKeys = [];
    if (schema.anyOf) {
      const info = schemaInfo(schema, false, []);
      if ((_a = info.union) == null ? void 0 : _a.some((s) => s.type !== "object")) {
        throw new SchemaError("All form types must be an object if schema is a union.");
      }
      unionKeys = ((_b = info.union) == null ? void 0 : _b.flatMap((s) => Object.keys(s.properties ?? {}))) ?? [];
    }
    schemaKeys = new Set([
      ...unionKeys,
      ...Object.keys(schema.properties ?? {}),
      ...schema.additionalProperties ? formData.keys() : []
    ].filter((key) => !key.startsWith("__superform_")));
  }
  function parseSingleEntry(key, entry, info) {
    if ((options == null ? void 0 : options.preprocessed) && options.preprocessed.includes(key)) {
      return entry;
    }
    if (entry && typeof entry !== "string") {
      const allowFiles = legacyMode ? (options == null ? void 0 : options.allowFiles) === true : (options == null ? void 0 : options.allowFiles) !== false;
      return !allowFiles ? void 0 : entry.size ? entry : info.isNullable ? null : void 0;
    }
    if (info.types.length > 1) {
      throw new SchemaError(unionError, key);
    }
    const [type] = info.types;
    return parseFormDataEntry(key, entry, type ?? "any", info);
  }
  const defaultPropertyType = typeof schema.additionalProperties == "object" ? schema.additionalProperties : { type: "string" };
  for (const key of schemaKeys) {
    const property = schema.properties ? schema.properties[key] : defaultPropertyType;
    assertSchema(property, key);
    const info = schemaInfo(property ?? defaultPropertyType, !((_c = schema.required) == null ? void 0 : _c.includes(key)), [
      key
    ]);
    if (!info)
      continue;
    if (!info.types.includes("boolean") && !schema.additionalProperties && !formData.has(key)) {
      continue;
    }
    const entries = formData.getAll(key);
    if (info.union && info.union.length > 1) {
      throw new SchemaError(unionError, key);
    }
    if (info.types.includes("array") || info.types.includes("set")) {
      const items = property.items ?? (((_d = info.union) == null ? void 0 : _d.length) == 1 ? info.union[0] : void 0);
      if (!items || typeof items == "boolean" || Array.isArray(items) && items.length != 1) {
        throw new SchemaError('Arrays must have a single "items" property that defines its type.', key);
      }
      const arrayType = Array.isArray(items) ? items[0] : items;
      assertSchema(arrayType, key);
      const arrayInfo = schemaInfo(arrayType, info.isOptional, [key]);
      if (!arrayInfo)
        continue;
      const isFileArray = entries.length && entries.some((e) => e && typeof e !== "string");
      const arrayData = entries.map((e) => parseSingleEntry(key, e, arrayInfo));
      if (isFileArray && arrayData.every((file) => !file))
        arrayData.length = 0;
      output[key] = info.types.includes("set") ? new Set(arrayData) : arrayData;
    } else {
      output[key] = parseSingleEntry(key, entries[entries.length - 1], info);
    }
  }
  return output;
}
function parseFormDataEntry(key, value, type, info) {
  if (!value) {
    if (type == "boolean" && info.isOptional && info.schema.default === true) {
      return false;
    }
    const defaultValue2 = defaultValues(info.schema, info.isOptional, [key]);
    if (info.schema.enum && defaultValue2 !== null && defaultValue2 !== void 0) {
      return value;
    }
    if (defaultValue2 !== void 0)
      return defaultValue2;
    if (info.isNullable)
      return null;
    if (info.isOptional)
      return void 0;
  }
  function typeError() {
    throw new SchemaError(type[0].toUpperCase() + type.slice(1) + ` type found. Set the dataType option to "json" and add use:enhance on the client to use nested data structures. More information: https://superforms.rocks/concepts/nested-data`, key);
  }
  switch (type) {
    case "string":
    case "any":
      return value;
    case "integer":
      return parseInt(value ?? "", 10);
    case "number":
      return parseFloat(value ?? "");
    case "boolean":
      return Boolean(value == "false" ? "" : value).valueOf();
    case "unix-time": {
      const date = new Date(value ?? "");
      return !isNaN(date) ? date : void 0;
    }
    case "bigint":
      return BigInt(value ?? ".");
    case "symbol":
      return Symbol(String(value));
    case "set":
    case "array":
    case "object":
      return typeError();
    default:
      throw new SuperFormError("Unsupported schema type for FormData: " + type);
  }
}

// node_modules/sveltekit-superforms/dist/superValidate.js
async function superValidate(data, adapter, options) {
  if (data && "superFormValidationLibrary" in data) {
    options = adapter;
    adapter = data;
    data = void 0;
  }
  const validator = adapter;
  const defaults2 = (options == null ? void 0 : options.defaults) ?? validator.defaults;
  const jsonSchema = validator.jsonSchema;
  const parsed = await parseRequest(data, jsonSchema, options);
  const addErrors = (options == null ? void 0 : options.errors) ?? ((options == null ? void 0 : options.strict) ? true : !!parsed.data);
  const parsedData = (options == null ? void 0 : options.strict) ? parsed.data ?? {} : mergeDefaults(parsed.data, defaults2);
  let status;
  if (!!parsed.data || addErrors) {
    status = await validator.validate(parsedData);
  } else {
    status = { success: false, issues: [] };
  }
  const valid = status.success;
  const errors = valid || !addErrors ? {} : mapErrors(status.issues, validator.shape);
  const dataWithDefaults = valid ? status.data : replaceInvalidDefaults((options == null ? void 0 : options.strict) ? mergeDefaults(parsedData, defaults2) : parsedData, defaults2, jsonSchema, status.issues, options == null ? void 0 : options.preprocessed);
  let outputData;
  if (jsonSchema.additionalProperties === false) {
    outputData = {};
    for (const key of Object.keys(jsonSchema.properties ?? {})) {
      if (key in dataWithDefaults)
        outputData[key] = dataWithDefaults[key];
    }
  } else {
    outputData = dataWithDefaults;
  }
  const output = {
    id: parsed.id ?? (options == null ? void 0 : options.id) ?? validator.id,
    valid,
    posted: parsed.posted,
    errors,
    data: outputData
  };
  if (!parsed.posted) {
    output.constraints = validator.constraints;
    if (Object.keys(validator.shape).length) {
      output.shape = validator.shape;
    }
  }
  return output;
}
function message(form, message2, options) {
  if ((options == null ? void 0 : options.status) && options.status >= 400) {
    form.valid = false;
  }
  form.message = message2;
  const remove = (options == null ? void 0 : options.removeFiles) !== false;
  const output = remove ? withFiles({ form }) : { form };
  return form.valid ? output : kitFail((options == null ? void 0 : options.status) ?? 400, output);
}
var setMessage = message;
function setError(form, path, error, options) {
  if (error == void 0 || typeof error !== "string" && !Array.isArray(error)) {
    options = error;
    error = path;
    path = "";
  }
  if (options === void 0)
    options = {};
  const errArr = Array.isArray(error) ? error : [error];
  if (!form.errors)
    form.errors = {};
  if (path === null || path === "") {
    if (!form.errors._errors)
      form.errors._errors = [];
    form.errors._errors = options.overwrite ? errArr : form.errors._errors.concat(errArr);
  } else {
    const realPath = splitPath(path);
    const leaf = traversePath(form.errors, realPath, ({ parent, key, value }) => {
      if (value === void 0)
        parent[key] = {};
      return parent[key];
    });
    if (leaf) {
      leaf.parent[leaf.key] = Array.isArray(leaf.value) && !options.overwrite ? leaf.value.concat(errArr) : errArr;
    }
  }
  form.valid = false;
  const output = options.removeFiles === false ? { form } : withFiles({ form });
  return kitFail(options.status ?? 400, output);
}
function withFiles(obj) {
  if (typeof obj !== "object")
    return obj;
  for (const key in obj) {
    const value = obj[key];
    if (value instanceof File)
      delete obj[key];
    else if (value && typeof value === "object")
      withFiles(value);
  }
  return obj;
}
var removeFiles = withFiles;
function fail(status, data) {
  function checkForm(data2) {
    return !!data2 && typeof data2 === "object" && "valid" in data2 && "data" in data2 && "id" in data2;
  }
  function checkObj(data2) {
    if (data2 && typeof data2 === "object") {
      for (const key in data2) {
        const v = data2[key];
        if (checkForm(v)) {
          v.valid = false;
          removeFiles(v);
        } else if (v && typeof v === "object") {
          checkObj(v);
        }
      }
    }
    return data2;
  }
  return kitFail(status, checkObj(data));
}

// node_modules/sveltekit-superforms/dist/index.js
var dist_default = SuperDebug_default;
export {
  SchemaError,
  SuperFormError,
  actionResult,
  arrayProxy,
  booleanProxy,
  dateProxy,
  dist_default as default,
  defaultValues2 as defaultValues,
  defaults,
  fail,
  fieldProxy,
  fileFieldProxy,
  fileProxy,
  filesFieldProxy,
  filesProxy,
  formFieldProxy,
  intProxy,
  message,
  numberProxy,
  removeFiles,
  schemaShape,
  setError,
  setMessage,
  splitPath,
  stringProxy,
  superForm,
  superValidate,
  withFiles
};
/*! Bundled license information:

sveltekit-superforms/dist/client/SuperDebug.svelte:
  (*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
//# sourceMappingURL=sveltekit-superforms.js.map
