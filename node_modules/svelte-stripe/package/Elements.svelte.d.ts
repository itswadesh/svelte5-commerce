/** @typedef {typeof __propDef.props}  ElementsProps */
/** @typedef {typeof __propDef.events}  ElementsEvents */
/** @typedef {typeof __propDef.slots}  ElementsSlots */
export default class Elements extends SvelteComponentTyped<{
    stripe: import("@stripe/stripe-js").Stripe;
    clientSecret?: string;
    amount?: any;
    currency?: any;
    mode?: "payment" | "setup" | "subscription";
    elements?: import("@stripe/stripe-js").StripeElements;
    fonts?: (import("@stripe/stripe-js").CssFontSource | import("@stripe/stripe-js").CustomFontSource)[];
    locale?: import("@stripe/stripe-js").StripeElementLocale;
    loader?: "auto" | "never" | "always";
    theme?: "stripe" | "night" | "flat";
    variables?: {
        fontFamily?: string;
        fontSmooth?: string;
        fontVariantLigatures?: string;
        fontVariationSettings?: string;
        fontLineHeight?: string;
        fontSizeBase?: string;
        fontSizeSm?: string;
        fontSizeXs?: string;
        fontSize2Xs?: string;
        fontSize3Xs?: string;
        fontSizeLg?: string;
        fontSizeXl?: string;
        fontWeightLight?: string;
        fontWeightNormal?: string;
        fontWeightMedium?: string;
        fontWeightBold?: string;
        spacingUnit?: string;
        gridRowSpacing?: string;
        gridColumnSpacing?: string;
        tabSpacing?: string;
        accordionItemSpacing?: string;
        spacingGridRow?: string;
        spacingGridColumn?: string;
        spacingTab?: string;
        spacingAccordionItem?: string;
        colorPrimary?: string;
        colorBackground?: string;
        colorText?: string;
        colorSuccess?: string;
        colorDanger?: string;
        colorWarning?: string;
        colorTextSecondary?: string;
        colorTextPlaceholder?: string;
        accessibleColorOnColorPrimary?: string;
        accessibleColorOnColorBackground?: string;
        accessibleColorOnColorSuccess?: string;
        accessibleColorOnColorDanger?: string;
        accessibleColorOnColorWarning?: string;
        colorPrimaryText?: string;
        colorBackgroundText?: string;
        colorSuccessText?: string;
        colorDangerText?: string;
        colorWarningText?: string;
        iconColor?: string;
        iconHoverColor?: string;
        iconCardErrorColor?: string;
        iconCardCvcColor?: string;
        iconCardCvcErrorColor?: string;
        iconCheckmarkColor?: string;
        iconChevronDownColor?: string;
        iconChevronDownHoverColor?: string;
        iconCloseColor?: string;
        iconCloseHoverColor?: string;
        iconLoadingIndicatorColor?: string;
        iconMenuColor?: string;
        iconMenuHoverColor?: string;
        iconPasscodeDeviceColor?: string;
        iconPasscodeDeviceHoverColor?: string;
        iconPasscodeDeviceNotificationColor?: string;
        iconRedirectColor?: string;
        colorIcon?: string;
        colorIconHover?: string;
        colorIconCardError?: string;
        colorIconCardCvc?: string;
        colorIconCardCvcError?: string;
        colorIconCheckmark?: string;
        colorIconChevronDown?: string;
        colorIconChevronDownHover?: string;
        colorIconRedirect?: string;
        tabIconColor?: string;
        tabIconHoverColor?: string;
        tabIconSelectedColor?: string;
        tabIconMoreColor?: string;
        tabIconMoreHoverColor?: string;
        colorIconTab?: string;
        colorIconTabHover?: string;
        colorIconTabSelected?: string;
        colorIconTabMore?: string;
        colorIconTabMoreHover?: string;
        logoColor?: string;
        tabLogoColor?: string;
        tabLogoSelectedColor?: string;
        blockLogoColor?: string;
        colorLogo?: string;
        colorLogoTab?: string;
        colorLogoTabSelected?: string;
        colorLogoBlock?: string;
        focusBoxShadow?: string;
        focusOutline?: string;
        borderRadius?: string;
    };
    rules?: {
        [selector: string]: {
            [cssPropertyName: string]: string;
        };
    };
    labels?: "above" | "floating";
}, {
    [evt: string]: CustomEvent<any>;
}, {
    default: {};
}> {
}
export type ElementsProps = typeof __propDef.props;
export type ElementsEvents = typeof __propDef.events;
export type ElementsSlots = typeof __propDef.slots;
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        stripe: import('@stripe/stripe-js').Stripe | null;
        clientSecret?: string | null;
        amount?: any;
        currency?: any;
        mode?: "payment" | "setup" | "subscription";
        elements?: import('@stripe/stripe-js').StripeElements | null;
        fonts?: (import("@stripe/stripe-js").CssFontSource | import("@stripe/stripe-js").CustomFontSource)[];
        locale?: import("@stripe/stripe-js").StripeElementLocale;
        loader?: "auto" | "never" | "always";
        theme?: "stripe" | "night" | "flat";
        variables?: {
            fontFamily?: string;
            fontSmooth?: string;
            fontVariantLigatures?: string;
            fontVariationSettings?: string;
            fontLineHeight?: string;
            fontSizeBase?: string;
            fontSizeSm?: string;
            fontSizeXs?: string;
            fontSize2Xs?: string;
            fontSize3Xs?: string;
            fontSizeLg?: string;
            fontSizeXl?: string;
            fontWeightLight?: string;
            fontWeightNormal?: string;
            fontWeightMedium?: string;
            fontWeightBold?: string;
            spacingUnit?: string;
            gridRowSpacing?: string;
            gridColumnSpacing?: string;
            tabSpacing?: string;
            accordionItemSpacing?: string;
            spacingGridRow?: string;
            spacingGridColumn?: string;
            spacingTab?: string;
            spacingAccordionItem?: string;
            colorPrimary?: string;
            colorBackground?: string;
            colorText?: string;
            colorSuccess?: string;
            colorDanger?: string;
            colorWarning?: string;
            colorTextSecondary?: string;
            colorTextPlaceholder?: string;
            accessibleColorOnColorPrimary?: string;
            accessibleColorOnColorBackground?: string;
            accessibleColorOnColorSuccess?: string;
            accessibleColorOnColorDanger?: string;
            accessibleColorOnColorWarning?: string;
            colorPrimaryText?: string;
            colorBackgroundText?: string;
            colorSuccessText?: string;
            colorDangerText?: string;
            colorWarningText?: string;
            iconColor?: string;
            iconHoverColor?: string;
            iconCardErrorColor?: string;
            iconCardCvcColor?: string;
            iconCardCvcErrorColor?: string;
            iconCheckmarkColor?: string;
            iconChevronDownColor?: string;
            iconChevronDownHoverColor?: string;
            iconCloseColor?: string;
            iconCloseHoverColor?: string;
            iconLoadingIndicatorColor?: string;
            iconMenuColor?: string;
            iconMenuHoverColor?: string;
            iconPasscodeDeviceColor?: string;
            iconPasscodeDeviceHoverColor?: string;
            iconPasscodeDeviceNotificationColor?: string;
            iconRedirectColor?: string;
            colorIcon?: string;
            colorIconHover?: string;
            colorIconCardError?: string;
            colorIconCardCvc?: string;
            colorIconCardCvcError?: string;
            colorIconCheckmark?: string;
            colorIconChevronDown?: string;
            colorIconChevronDownHover?: string;
            colorIconRedirect?: string;
            tabIconColor?: string;
            tabIconHoverColor?: string;
            tabIconSelectedColor?: string;
            tabIconMoreColor?: string;
            tabIconMoreHoverColor?: string;
            colorIconTab?: string;
            colorIconTabHover?: string;
            colorIconTabSelected?: string;
            colorIconTabMore?: string;
            colorIconTabMoreHover?: string;
            logoColor?: string;
            tabLogoColor?: string;
            tabLogoSelectedColor?: string;
            blockLogoColor?: string;
            colorLogo?: string;
            colorLogoTab?: string;
            colorLogoTabSelected?: string;
            colorLogoBlock?: string;
            focusBoxShadow?: string;
            focusOutline?: string;
            borderRadius?: string;
        };
        rules?: {
            [selector: string]: {
                [cssPropertyName: string]: string;
            };
        };
        labels?: "above" | "floating";
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export {};
